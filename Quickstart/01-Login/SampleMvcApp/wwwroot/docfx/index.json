{
  "api/Configit.Configurator.Service.Response.SingleValuedValue.html": {
    "href": "api/Configit.Configurator.Service.Response.SingleValuedValue.html",
    "title": "Class SingleValuedValue | Configit VT SDK",
    "keywords": "Class SingleValuedValue A value in a single valued variable, meaning only one value can be assigned to the variable at a time. Base class for SingletonValue and IntervalValue . Inheritance System.Object ConfigurationValue SingleValuedValue Derived classes IntervalValue SingletonValue Inherited Members ConfigurationValue.Text Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public abstract class SingleValuedValue : ConfigurationValue Constructors SingleValuedValue(String, ConfigurationValueState, StateAndJustification) Initializes a new instance of SingleValuedValue . Declaration public SingleValuedValue(string text, ConfigurationValueState state, StateAndJustification internalState) Parameters Type Name Description System.String text ConfigurationValueState state StateAndJustification internalState Properties InternalState The internal state and justification of the value. Provided when IncludeInternals is true in the request. Declaration public StateAndJustification InternalState { get; } Property Value StateAndJustification State The configured state of the value. Use the state to determine if the value is assigned, or if it can be assigned (and the consequences of assigning it). Declaration public ConfigurationValueState State { get; } Property Value ConfigurationValueState"
  },
  "api/Configit.Configurator.Service.Response.ValueWithCurrency.html": {
    "href": "api/Configit.Configurator.Service.Response.ValueWithCurrency.html",
    "title": "Class ValueWithCurrency | Configit VT SDK",
    "keywords": "Class ValueWithCurrency A value and its currency. Inheritance System.Object ValueWithCurrency Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public class ValueWithCurrency Constructors ValueWithCurrency(Decimal, String) Initializes a new instance of ValueWithCurrency . Declaration public ValueWithCurrency(decimal value, string currency) Parameters Type Name Description System.Decimal value System.String currency Properties Currency The currency. For example, \"EU\" for euros, or \"USD\" for US dollars. Declaration public string Currency { get; } Property Value System.String Value The value. Declaration public decimal Value { get; } Property Value System.Decimal"
  },
  "api/Configit.Configurator.Service.Response.html": {
    "href": "api/Configit.Configurator.Service.Response.html",
    "title": "Namespace Configit.Configurator.Service.Response | Configit VT SDK",
    "keywords": "Namespace Configit.Configurator.Service.Response Classes ConfigurationValue Base class for SingleValuedValue and MultiValuedValue . ConfigurationValueState Represents the state of a ConfigurationValue , as determined by the configure service. ConfigurationVariable Represents a variable in the configuration. A variable has a ValueType , Values , Text , Properties . ConfigureResponse Response object returned by ConfigureAsync(ConfigureRequest) . The response has the configuration of the product, and includes the variables, their values, pricing information, and arguments. Debug Debug information for the configure service. DebugTrace Debugging information for how the configuration engine assigns the values to variables. ExpandArgumentsResponse Response of ExpandArgumentsAsync(ExpandArgumentsRequest) , containing the expanded arguments. IntervalValue An interval value in a variable. Issue Represents an issue the configure service had when processing the ConfigureRequest . Line Represents a line in SublinesResponse .Lines. MultiValuedValue A value in a variable that can have multiple values assigned at the same time ( AllowMultipleAssignments is true ). To include a MultiValuedValue in a configuration: Create a VariableAssignment . Set the assignment's Value to the IncludeValue .Value. To exclude a MultiValuedValue from a configuration: Create a VariableAssignment . Set the assignment's Value to the ExcludeValue .Value. Set the assignment's Exclude property to false . MultiValuedValue itself does not have ConfigurationValueState . Instead, see IncludeValue.ConfigurationValueState and ExcludeValue.ConfigurationValueState. PriceLine A line within a PriceSheet . Some lines contribute to the total value of the PriceSheet , while others are for informational purposes, like subtotals, statistical values, or header lines. For non-header lines, the PriceLineRate represents the value used to calculate the price line result. PriceLineRate is IsAssignable , you can set the price line's value in PriceLineAssignment s in requests to the configure and pricing services. See Status to determine whether the price line contributes to the price, and if the line is invalid. PriceLineRate The price line rate, used to calculate the Result . PriceLineStatus Explains if a price line is disabled, invalid, or is for informational purposes. In any of these cases, the price line does not contribute to the price. PriceResponse Response object returned by PriceAsync(PriceRequest) . The response includes a pricing sheet with price lines and totals, the arguments used by the service, and (optionally) debug information. PriceSheet Contains the price lines and pricing summary (net value, taxes, and total price) for a product. A price sheet is part of the PriceResponse returned by PriceAsync(PriceRequest) . PriceSummary The summary of a PriceSheet , including a product's net value, tax, and total price. Product Represents a product associated with a Line . Property A property provides additional information that can be associated with Section , ConfigurationVariable , and SingleValuedValue . RemovedAssignments Variable and/or price line assignments that was removed from a configure and/or price request. Section A section represents a grouping of variables. Sections are defined in views. Sections provide the structure for how to present the variables visually. For instance, each section could be displayed as a sheet in a tabbed control. A section may contain subsections. SingletonValue Represents a single value, such as string, number, or date. SingleValuedValue A value in a single valued variable, meaning only one value can be assigned to the variable at a time. Base class for SingletonValue and IntervalValue . StateAndJustification The internal State and Justification of a variable's value. For debugging purposes. SublinesResponse Response object returned by SublinesAsync(SublinesRequest) . Contains a root line and a flattened list of any sublines that fall under the root. Each line has pricing and translated texts. Trace Provides trace information. ValueWithCurrency A value and its currency. Enums Justification The internal justification of a value's State . For debugging purposes. Provides context for how the configuration engine determined the value's state. PropertyType The type of a Property . State The internal configuration state of a variable's value. For debugging purposes."
  },
  "guides/vtprojects.html": {
    "href": "guides/vtprojects.html",
    "title": "VT projects | Configit VT SDK",
    "keywords": "VT projects A VT project is a workspace where you prepare the contents of a VT package . Creating a VT project To create a VT project, start by making a directory that will host the project, and navigate to it. For example: $ mkdir myVTProject $ cd myProject Next, run the following vtc command, replacing <myQuotePackage> with the path to your source Quote package: $ vtc package create --from <myQuotePackage> This generates an initial set VT project files, including config.json , where you can specify: The location of the source Quote package. The build path. When you build the VT project, the resulting VT package gets placed here. Targets (such as the cloud) for where to publish the VT package. Customizing VT project contents In a VT project, you can define: Lookup tables , read-only data tables accessible at runtime by the Configurator API services. Arguments , values used by the services when solving configurations or calculating prices. Solve functions for defining custom configuration behavior accessible by your SAP models. Price functions for defining custom pricing behavior. Building a VT package To build the project into a VT package, run: $ vtc package build This VT package is deployed to the ./output folder in your project's root directory. When you build, data from the source Quote package is converted into a format compatible with the VT SDK API. The resulting VT package is stand-alone; it doesn't have dependencies on other data sources. Publishing a VT package You can publish a VT package to a target specified in config.json . For example, the following publishes to the amazon target: $ vtc package publish amazon For more information on vtc and package management, see VTC command line tool ."
  },
  "samples/sample-configurator.html": {
    "href": "samples/sample-configurator.html",
    "title": "Sample Configurator | Configit VT SDK",
    "keywords": "Sample Configurator Note This documentation is work in progress."
  },
  "guides/arguments.html": {
    "href": "guides/arguments.html",
    "title": "Arguments | Configit VT SDK",
    "keywords": "Arguments Arguments are key-value pairs of data used by the Configurator API services. You define them in arguments.json , located in your VT package at .\\quote-package-dev\\resources\\ . You can define arguments as: default values copies of other arguments dynamic expressions that get their values from lookup tables The arguments file is compiled into the VT package when it is built (using the vtc build command), Defining default values Consider the following arguments: { \"CustomerId\": \"John\" } We would like to have a default value for the customer ID and the product ID if they are not set in the original arguments. The following arguments.json defines default values for the CustomerId and ProductId : { \"CustomerId\": \"Jane\", \"ProductId\": \"DEFAULT_TSHIRT\" } Expanding the arguments will yield the following result: { \"CustomerId\": \"John\", \"ProductId\": \"DEFAULT_TSHIRT\" } Notice how the expansion only adds arguments and does not overwrite the existing CustomerId . Copying an argument value to a new location Consider the following arguments: { \"Customer\": { \"Id\": \"1234567890\", \"Name\": \"John\" }, \"ProductId\": \"TSHIRT\" } In this case we would like to copy the customer ID into the argument path SoldTo/ExternalId . The following arguments.json defines a copy of the argument value into a new location. { \"SoldTo\": { \"ExternalId\": \"$Customer.Id\" } } Notice that: $ is placed before references to another argument value Using the . separator specifies nesting of the Id value. Expanding the arguments yields the following result: { \"Customer\": { \"Id\": \"1234567890\", \"Name\": \"John\" }, \"ProductId\": \"TSHIRT\", \"SoldTo\" : { \"ExternalId\": \"1234567890\" } } Looking up argument values Arguments can dynamically look up SAP-specific data, like finding the currency for a sales organization. The following arguments.json uses the ProductHierarchy table shown in Lookup tables : { \"MaterialVariant\": { \"Material\": { \"ProductHierarchy\": { \"lookup\": \"lookupTables/ProductHierarchy\", \"select\": \"ProductHierarchy\", \"where\": { \"SalesOrganization\": { \"=\": \"$SalesArea.SalesOrganization\" }, \"DistributionChannel\": { \"=\": \"$SalesArea.DistributionChannel\" }, \"Material\": { \"=\": \"$ProductId\" } } } } } } lookup specifies the full table name which is constructed using the collection name and the table name defined in the queries.json file: collection-name / table-name select specifies the column from the lookup table to use as the argument value. where specifies the where clause , similar to a SQL where clause. Each field in the where object specifies a column name, comparison operator and a query value. The query value can be a constant or an argument reference. The comparison operator must be one of = , != , < , > , <= and >= . Passing these arguments to an API service: { \"ProductId\": \"BIKE_TEAM\", \"SalesArea\": { \"SalesOrganization\": \"0001\", \"DistributionChannel\": \"01\" } } Will look up the ProductHierarchy and expand the arguments to: { \"ProductId\": \"BIKE_TEAM\", \"SalesArea\": { \"SalesOrganization\": \"0001\", \"DistributionChannel\": \"01\" }, \"MaterialVariant\": { \"Material\": { \"ProductHierarchy\": \"0014500110\" } } } }"
  },
  "guides/httpserver.html": {
    "href": "guides/httpserver.html",
    "title": "HTTP server | Configit VT SDK",
    "keywords": "HTTP server The HTTP server is a self-hosted web server that serves up the API services as HTTP endpoints. Starting the HTTP server To start the server, run dotnet Host.dll . It listens on port 5555 by default. Server settings You can change the server settings in appSettings.json . The default settings are: { \"urls\": \"http://+:5555\", \"cacheTimeoutInSeconds\": 100, \"productCacheMaxItems\": 10, \"priceDefinitionCacheMaxItems\": 10, \"argumentsDefinitionCacheMaxItems\": 10, \"lookupCollectionCacheMaxItems\": 10, \"scriptCacheMaxItems\": 100, \"bomCacheMaxItems\": 10, \"scriptPoolSize\": 4 } urls: Url that server should listen on cacheTimeoutInSeconds: sets the number of seconds when the cache of loaded resources should timeout. Loaded resources are price procedures, product models etc. These are loaded once from the resource repository and kept in memory.When a resource times out, then the next request for the given resource will check if there is a newer available version. If there is a newer version, then the cache updates accordingly. The keys ending with maxItems control the maximum number of cached resources for a given resource type. Setting these to a large number can lead to high memory usage. In the appSettings.Production.json you specify the connection string to storage where the \"VT Packages\" are loaded from sourceConnectionString says where the package is located, and how to connect to it. When using StorageType=Directory , the RootPath corresponds to the one used in the directory that you published your package to. When using StorageType=Amazon , the Configurator API might throw a TrustedFailure WebException . In this case, run the command: mozroots --import --ask-remove --machine . Endpoints and mappings to API reference The httpserver has 4 endpoints: /api/sublines/ - expand multilevel products lines /api/configure - configure/price a single product at a time /api/price - get a price report for a single product at a time /api/expandArguments - manually expand arguments. This can be used for debugging. Each of these endpoints is implemented in a .NET class. The API reference documentation include details for each of these 4 endpoints. The /api/expandArguments endpoint is implemented in ExpandArgumentsService . The /api/sublines endpoint is implemented in SublinesService . The /api/configure endpoint is implemented in ConfigureService . The /api/price endpoint is implemented in PriceService . To learn how to use API, refer to the Configurator API reference material. You can easily map the API reference to JSON request/responses. For example the ConfigureRequest has these these properties: string ProductId; string PackagePath; string Language; string Currency; ValueWithUnit Quantity; ExpandoObject GlobalArguments; IEnumerable<VariableAssignment> VariableAssignments; IEnumerable<PriceLineAssignment> PriceLineAssignments; You can map these properties into a json request with these rules: Lowercase the first word their names. string is a json string int/decimal is a json number Types such a ValueWithUnit you can follow the documentation and find its properties. ExpandoObject is any json object IEnumerable is a json array So an object of the ConfigureRequest can be expression in json like this: { \"productId\": \"BIKE_TEAM\", \"packagePath\": \"Basic\", \"language\": \"Language\", \"currency\": \"USD\", \"valueWithQuantity\": { \"value\": 21, \"unit\": \"EA\" }, \"globalArguments\": { \"SalesOrganizarion\": \"0001\" }, \"variableAssignments\": [ {\"variableId\": \"COLOR\", \"value\": \"BLUE\" }], \"priceAssignments\": [] }"
  },
  "guides/linux.html": {
    "href": "guides/linux.html",
    "title": "Running on Linux | Configit VT SDK",
    "keywords": "Running on Linux You can run the VT SDK API from a Linux machine by using dotnet . The following explains how to set up .NET Core, which includes dotnet , on CentOs 7.1 or above. Install dotnet dependencies In a terminal, execute the following commands: su <enter your password> yum -y install libunwind libicu curl -sSL -o dotnet.tar.gz https://go.microsoft.com/fwlink/?linkid=848821 mkdir -p /opt/dotnet && tar zxf dotnet.tar.gz -C /opt/dotnet ln -s /opt/dotnet/dotnet /usr/local/bin curl --silent --location https://rpm.nodesource.com/setup_7.x | bash - yum -y install nodejs Refer to https://www.microsoft.com/net/core#linuxcentos for more on installing .NET Core on CentOs."
  },
  "guides/lookup-tables.html": {
    "href": "guides/lookup-tables.html",
    "title": "Lookup tables | Configit VT SDK",
    "keywords": "Lookup tables At runtime, the Configurator API needs access to data - such as customer information, sales organizations, and distribution channels - which is typically stored outside of your product models. You provide access to this data in the form of lookup tables . Defining lookup tables In your VT project's queries.json file, you define lookup tables with SQL queries against databases like those in your source Quote package. The file is located at quote-package-dev\\resources\\ . Below is an example queries.json file that defines a lookup table named ProductHierarchy : { \"collection\": { \"serializerId\": \"adoNetTableCollection\", \"id\": \"lookupTables\", \"connectionDescriptions\": [ { \"id\": \"SapTables\", \"provider\": \"System.Data.SqlServerCe.4.0\", \"connectionString\": \"Data Source=App\\\\Materials\\\\sap_tables.sdf;\" }, ], \"tables\": [ { \"id\": \"ProductHierarchy\", \"connectionId\": \"SapTables\", \"command\": \"SELECT MATNR as Material, VKORG as SalesOrganization, VTWEG as DistributionChannel, PRODH as ProductHierarchy FROM MVKE\" } ] } } At build time , the vtc tool processes queries.json , generating the lookup tables and adding them to the VT package. The lookup tables are read-only, and represented in a compact format designed for fast access. They also remove dependencies on 'real' databases so that your package is platform neutral. The above defintion generates a table like this one: Material SalesOrganization DistributionChannel ProductHierarchy BIKE_TEAM 0001 01 0014500110 IHEAR 0001 01 0014500121 TSHIRT 0001 01 0014500111 Using lookup tables You can use lookup tables: When defining dyanmic arguments. See how in the Arguments guide. From within certain JavaScript functions, described below. Lookup tables are supported in pricing functions and pfunctions . These functions have an optional parameter, callbacks , that provides access to the lookup tables via its lookup object. To get a lookup table, call callbacks.lookup.getTable() , passing it the table name. For example, to get the table named customers : function myCustomFunction( callbacks ) { var table = callbacks.lookup.getTable( 'customers' ); ... } Querying tables with lookup() You can query a table by calling lookup() on in it. This performs a SELECT * type query, returning all of the table rows. lookup() takes an optional where parameter that lets you filter the results of the query, as in a SQL WHERE clause. The where parameter can be an object or an array. where object syntax The where object can contain one or more properties. Each property represents an 'equals' condition to filter on, and are key-value pairs, where: The key is the name of a column in the table, and The value is the value in the condition. For example, to select all records where Customer equals Arthur : var where = { Customer: 'Arthur' }; var records = table.lookup( where ); Multiple conditions are joined by an AND operator. For example, to select all records where Customer equals Arthur and Country equals England : var where = { Customer : 'Arthur', Country : 'England' }; var records = table.lookup( where ); where array syntax The where array lets you specify conditions with a variety of operator types. Each condition in the array is an object with the format: { column: <columnName>, opr: <operator>, value: <value> } <columName> is the name of a column in the table. <operator> must be one of the supported operators, listed below. <value> can be a single value or an array of values, depending on the type. The supported operators are: Operator Can value be null? Can value be an array? Satisfied When Eq Yes Yes Cell is equal to at least one of the values Neq Yes Yes Cell is not equal to any of the values Lt No No Cell is less than provided value LtEq No No Cell is less than or equal the provided value Gt No No Cell is greater than the provided value GtEq No No Cell is greater or equal the provided value StartsWith No Yes Cell starts with at least one of the provided values EndsWith No Yes Cell ends with at least one of the provided values Contains No Yes At least one of the provided values is a substring in the cell's value For example, to select all records where Weight is between 10 and 20 : var where = [ { column: 'Weight', opr: 'Gt', value: 10 }, { column: 'Weight', opr: 'Lt', value: 20 } ]; var records = table.lookup( where );"
  },
  "guides/prevent-sap-date-time-extract.html": {
    "href": "guides/prevent-sap-date-time-extract.html",
    "title": "How to prevent SAP date/time characteristics from extracting | Configit VT SDK",
    "keywords": "How to prevent SAP date/time characteristics from extracting VT SDK does not yet support date/time characteristics. To prevent them from extracting into your source Quote package, you need to remove references to them in Extract.xml , as described in this guide. 1. Create a text file for storing names Begin by creating a temporary text file for storing the names of the characteristics you remove. You may need to search on each characteristic name several times to remove all references to it. This file acts as a backup in case you accidentally lose your in-memory copy of a particular name. 2. Open Extract.xml Open Extract.xml , which is produced by Configit Quote Setup when you create a Quote package: Find your Quote package on disk. From your Quote package, go to ./Server/Materials . Open Extract.xml in a text editor. 3. Remove date/time characteristics and references to them In Extract.xml : Search for a <Characterstic> node whose CharacteristicType is set to Date or Time . Copy the characteristic's Name into your temporary file. Remove the <Characteristic> node. Search on the characteristic name. If the name matches on the Name attribute value of a <CharacteristicReference> node, remove the node. If the name appears in the Source attribute value of a <DependencySourceLine> : Copy the root dependency's name into your temporary file. Remove the <Dependency> node. For each dependency you removed: Search on the dependency name. Remove any <DependencyReference> nodes whose Name attribute value matches the dependency name. Repeat the above steps until no date/time characteristics remain. Once you've removed all date/time references, rebuild your Quote package. Example For example, say searching on Date matched characteristic below: <Characteristic Name=\"M4_VBEP_EDATU\" CharacteristicType=\"Date\" Status=\"Released\" NumberOfChars=\"10\" SingleMultiValue=\"S\" DecimalPlace=\"0\" Template=\"DD.MM.YYYY\"> ... </Characteristic> You would copy the name M4_VBEP_EDATU , then delete the node. Next, you would search on M4_VBEP_EDATU . Say you found a <CharacteristicReference> whose name matched the characteristic, as below: <Class Name=\"M1_C_865240\" ClassType=\"300\" ValidFrom=\"2010-04-07\" ValidTo=\"9999-12-31\" Status=\"Released\"> <CharacteristicReferences> <CharacteristicReference Name=\"M4_VBEP_EDATU\"/> ... </CharacteristicReferences> ... </Class> You would then delete the <CharacteristicReference> node. Say another search on M4_VBEP_EDATU matched a value in a <DependencySourceLine> , as below: <Dependency Name=\"M4_PRE_GF_VBEP_EDATU\" Type=\"PreCondition\" Status=\"Released\"> <DependencySource> <DependencySourceLine Source=\"$self.M4_VBEP_EDATU &gt;= 20151231\"/> </DependencySource> ... </Dependency> You would copy the name of the root dependency object. In this case, M4_PRE_GF_VBEP_EDATU . Then you would delete the dependency node and all its subnodes. Finally, you would search for occurrences of the dependency name in <DependencyReference> nodes, and delete them. For example: <Value Value=\"A92\"> <DependencyReferences> <DependencyReference Name=\"M4_PRE_GF_VBEP_EDATU\"/> ... </DependencyReferences> ... </Value> You would delete the node <DependencyReference Name=\"M4_PRE_GF_VBEP_EDATU\"/> . Where to find characteristic reference nodes <CharacteristicReference> nodes can appear under: <CharacteristicGroup> nodes, under Materials/Material/ConfigurationProfiles/ConfigurationProfile/CharacteristicGroups . <VariantFunction> nodes, under VariantFunctions/VariantFunction . Where to find dependency reference nodes <DependencyReference> nodes can appear under: <Characteristic> nodes describing a characteristic. <Value> nodes describing one value of a characteristic. < ConfigurationProfile > nodes, under Materials/Material/ConfigurationProfiles . < BOMComponent > nodes describing selection conditions, under Materials/Material/BOMs/BOM/BOMComponents ."
  },
  "guides/price-functions.html": {
    "href": "guides/price-functions.html",
    "title": "Price functions | Configit VT SDK",
    "keywords": "Price functions There are two types of price customization functions: Requirements Alternative calculation types The input parameters of a price customization function are: data : Provides access to various pricing data. Can contain three objects: args : Arguments for the current price sheet. rate : The price line's rate. summationGroups : An object of summation group values calculated on the previous step, if any. Access a group by its name. For example, data.summationGroups[groupName] A converted SAP price procedure automatically generates groups named NetValue , TaxValue , Total , and Rebate . In addition, all subtotals used on a step in the SAP price procedure will generate a matching summationGroup . For instance, a step with Subtotal=A will give a summation group S_A : data.summationGroups['S_A'] callbacks (optional): Provides access to lookup tables. For example: const categoriesWithPricing = callbacks.lookup.getTable(`price-custom/ItemWithPricing_CategoriesWithPricing`); const result = categoriesWithPricing.lookup({ SalesDocType: salesDocType, Category: resolvedCategory }); Requirement functions A requirement function is called when a price step or an access sequence is activated. Its returned object must contain: active : A Boolean property, where true indicates whether the item should be executed. Example of a requirement customization function: function requirement_3(data) { var localCurrency = sapUtil.getLocalCurrency( data.args ); var currency = sapUtil.getCurrency( data.args ); var result = localCurrency != null && currency != null && localCurrency !== currency; return { active: result }; } The above example uses the utility functions sapUtil.getLocalCurrency and sapUtil.getCurrency to find the currency. For more utility functions, see the Customizations\\src\\price\\lib folder. You can also add your own there. Implemented SAP requirements These SAP standard requirements are already implemented: Item with pricing (Requirement=2) Foreign currency (Requirement=3) Domestic business (Requirement=7) Foreign currency (Requirement=8) Plant Or Departure Country Is Set (Requirement=10) Alternative calculation type functions An alternative calculation type is similar to SAP altCalcTypes, used for calculating the value for a price line. Its returned object must contain: value : A property whose value is a number. Example of an alternative calculation type function: function altCalcType_2(data) { const net = util.safeGetSummationGroup(data, 'NetValue'); return { value: net }; Implemented SAP alternative calculation types These SAP standard alternative calculation types are already implemented: Net Value (AltCalcType=2) Net Value Plus Tax (AltCalcType=4) Profit Margin (AltCalcType=11) Profit Margin Percent (AltCalcType=18) Generating price customizations stubs When the Quote package is converted, stub .js files are generated for each Requirement and AltCalcType (different from 0). You can implement these stubs in the quote-package-dev/src/price folder. General script info Guidelines for writing implementations You may separate your JavaScript code into modules so long as they are supported by Babel and Rollup . For performance reasons, consider keeping the customizations simple and reduce the number of external dependencies. Bundling the customizations You must bundle your customizations into a single file, so that they can be imported into the VT cloud package. To do so, run the command vtc package build in the project root folder."
  },
  "guides/solve-functions.html": {
    "href": "guides/solve-functions.html",
    "title": "Solve functions | Configit VT SDK",
    "keywords": "Solve functions You can customize the pricing and solve services with JavaScript functions. Each function must be in its own .js file, whose name matches the function being exposed. The .js files are placed in the quote-package-dev\\src\\price and quote-package-dev\\src\\solve . The vtc command line creates these folders and creates JavaScript stubs if there is a need for customization in the converted Quote package. In ignore.json , you can control which custom functions get published when the package is made. Solve function customizations Solve functions include variant functions and pfunctions. Variant functions The parameters of a variant function are: args : Each member of args is an object with an input name and value, each one bound to a characteristic by name. Its returned object must contain: __result : A Boolean property indicating the success of execution, or the result of a function that returns a Boolean (e.g. IsEqual() ). An output property. Example This variant function example takes two numbers and returns the one with the highest value: function Z_MAX(args) { return { __result: true, MAX_RES: args.VAL1 > args.VAL2 ? args.VAL1 : args.VAL2 }; } This function must be placed in a .js file of the same name, in this case Z_MAX.js . You can then use it in a model's characteristic assignments, for example: FUNCTION Z_MAX(VAL1 = $SELF.COSOE_RC_X1, VAL2 = $SELF.COSOE_RC_X2, MAX_RES = $SELF.COSOE_RC_X3) Pfunctions The parameters of a pfunction are: args : Each member of args is an object with an input name and value, each one bound to a characteristic by name. env : The environment of the active KMAT, providing access values in dynamic structures such as VBAK. callbacks : Each member provided represents a built-in callback function that can be called from the JavaScript customization function to affect the model characteristics. See below for the available functions and their parameters. Its returned object must contain: __result : A Boolean property indicating the success of execution, or the result of a function that returns a Boolean (e.g. IsEqual() ). An output property. Callback functions These callback functions are available in the callbacks object: assignValue(string csticName, object csticValue) Assigns a value to a characteristic. csticName: The name of a characteristic whose value should be assigned. csticValue: The value to assign to the characteristic. assignDefaultValue(string csticName, object csticValue) Assigns a default value to a characteristic. csticName: The name of a characteristic whose default value should be assigned. csticValue: The default value to assign to the characteristic. removeDefaultValue(string csticName, object csticValue) Removes a default assignment on the characteristic. csticName: The name of a characteristic whose default assignment should be removed. csticValue: The default value to remove from the characteristic. removeProcedureAssignments(string csticName) Removes assignments to the characteristic by procedures. csticName: The name of a characteristic whose procedure assignments should be removed. removeUserAssignments(string csticName) Removes assignments to the characteristic by users. csticName: The name of a characteristic whose user assignments should be removed. getCurrentDomainValues(string csticName) Gets the assigned values of the currently allowed domain, if assignments have been made. csticName: The name of a characteristic whose assigned values should be returned. Returns: object[] getRestrictedDomainValues(string csticName) Gets the assigned values of the currently restricted domain. Does not reflect assignments to procedure or user unless they lead to the restriction. csticName: The name of a characteristic whose restricted values should be returned. Returns: object[] getAssignedValue(string csticName) Gets the characteristic assigned value. csticName: The name of a characteristic whose assigned value should be returned. Returns: object getAssignedValues(string csticName) Gets the currently assigned values. csticName: The name of a characteristic whose values should be returned. Returns: object[] getDomainValues(string csticName) Gets the relevant domain values. csticName: The name of a characteristic whose values should be returned. Returns: object[] Examples This pfunction assigns values to characteristics bound to VAL1 and VAL2. function P_SET_VAL(args, env, callbacks) { callbacks.assignValue('VAL1', 1); callbacks.assignValue('VAL2', 2); return { __result: true }; } This function must be placed in a .js file of the same name, in this case P_SET_VAL.js . It can then be used in a model's characteristic assignments, for example as follows: PFUNCTION P_SET_VAL() The next example gets the restricted domain values for 'COSOE_RC_X1' and returns a result based on the first 2 elements being equal to 1 and 2. function RESTRICTED_TO_1_OR_2(args, env, callbacks) { var restrictedDomainValues = callbacks.getRestrictedDomainValues('COSOE_RC_X1'); return { __result: restrictedDomainValues[0].SingleOrDefault == '1' && restrictedDomainValues[1].SingleOrDefault == '2' }; } This function must be placed in a .js file of the same name, in this case RESTRICTED_TO_1_OR_2.js . It can then be used in a model's characteristic assignments, for example as follows: $SELF.VAL1 = 42 IF PFUNCTION RESTRICTED_TO_1_OR_2() General script info Guidelines for writing implementations You may separate your JavaScript code into modules so long as they are supported by Babel and Rollup . For performance reasons, consider keeping the customizations simple and reduce the number of external dependencies. Bundling the customizations You must bundle your customizations into a single file, so that they can be imported into the VT cloud package. To do so, run the command vtc package build in the project root folder."
  },
  "index.html": {
    "href": "index.html",
    "title": "Getting started | Configit VT SDK",
    "keywords": "Getting started What is Configit VT SDK? Configit VT SDK is a set of tools and APIs that you can use to create configurator applications. The 'VT' stands for Virtual Tabulation ™, Configit's patented configuration technology. The SDK includes: vtc , a command line tool for creating, building, and publishing VT packages that contain SAP products, pricing, and BOM. Configurator API, a .NET class library API with services for configuring products in VT packages. A self-hosted HTTP server that exposes the Configurator API as a REST API. A sample VT SDK configurator web application. The SDK does not, at this time, support product models authored in other Configit products (Ace, Build, Model). Overview The following sections give an overview the SDK's key concepts: Configurators Creating VT packages Updating VT packages Some familiarity with product configuration and SAP concepts is useful, but not required. Configurators Let's take a look at the flow of a VT SDK configurator web application, or configurator for short. Step 1: User interaction First, the user interacts with the configurator UI by making assignments to products or pricing. For example, they can: Select a value in the configuration, such as the color of a product. Enter a pricing value, such as giving a discount. Step 2: Making an HTTP request Next, the configurator makes an HTTP POST request with a JSON body to a service on the HTTP server. The services are stateless; as a result, a request typically includes all assignments the user has made throughout their configuration session. Step 3: Processing the request The HTTP server receives the request at one of these endpoints: /api/configure , for configuring a single product. /api/price , for customizing the pricing of a single product. /api/sublines , for configuring a multilevel product. The endpoints are stateless, thread-safe REST services that wrap the Configurator API class library services. Step 4: Retrieving VT package data A service gets its product and pricing data from a VT package located on disk or in the cloud. VT packages are described in the next section . Step 5: Handling the response Lastly, the server returns the response with a JSON body, and the configurator updates its UI accordingly. /api/configure returns the entire configuration of a product, with pricing. The configuration includes all variables (characteristics in SAP), their values, and the states of the values (for example, whether they are assigned). /api/price returns a product's price sheet, with totals (net value, tax, and total price) and price lines that describe how the sheet is calculated. /api/sublines returns the BOM of a multilevel product, including its subproducts and pricing. Creating VT packages VT packages are collections of data including configurable products, standard (non-configurable) products, pricing information, and BOM. They also have view data like translated texts, properties, and structure for how to organize configurations in a UI. Below shows the process for creating a VT package from SAP master data: Step 1: Extracting from SAP First, you use the Configit Quote SAP Extractor to extract data from SAP into a Quote package . Step 2: Creating a VT project Next, you use the vtc command line tool to create a VT project that references the Quote package. The project is where you make customizations to your data. A VT project exists on disk as a collection of files and folders. At its root is a config.json configuration file specifying: The location of the source Quote package. The path on disk where to build the project into a VT package. Publish targets (such as the cloud) for where to deploy the VT package. Step 3: Customizing VT project contents During this step, you can customize: Lookup tables , supplementary data you can access at runtime. Examples include customer lists, sales areas, and product hierarchies. Arguments , values used by the services when solving configurations and calculating prices. Arguments can be static or dynamic, with dynamic arguments getting their values from lookup tables. For instance, you can select which currency to use based on the sales area. Price functions , which let you customize the behavior during pricing. There are two kinds: requirements and alternative calculation types. Requirements are called when a price step or an access sequence is activated. Alternative calculation types are used to calculate the value of a price line. Solve functions , which your SAP models can refer to. There are two kinds: variant functions and pfunctions . Variant functions return simple values and are used in dependencies in your SAP models. Pfunctions can change the state of the configuration, the valid domain of a characteristic, or even the SAP environment itself. Step 4: Building the VT package After your customizations are complete, you use vtc to build the project contents into a VT package. The VT package is built on disk at a location specified in the project's config.json file. Step 5: Publishing the VT package Finally, you use vtc to publish the package to a location on disk or in the cloud at Amazon S3 or Azure Blob storage. The package is now ready for use by your configurator. When you publish, the VT package gets versioned with a GUID. You can use GUIDs to target specific package versions, for example, to protect a user's configuration session from being impacted by newly published packages. Updating VT packages When your SAP master data changes, you can update your VT packages accordingly. To do so: Extract your SAP data into a new Quote package. In your VT project, replace the previous Quote package with the new Quote package. Revisit your customizations (lookup tables, arguments, pricing functions, solve functions), editing them as necessary to be aligned with changes in the master data. Rebuild and publish the VT package. Further reading See Guides for details on VT SDK concepts and the tools it ships with. See Configurator API for reference material on the services and their request/response data types."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Configurator API reference documentation | Configit VT SDK",
    "keywords": "Configurator API reference documentation The Configurator API consists of these main services: ConfigureService , for configuring and pricing a single product. SublinesService , for configuring and pricing a multilevel product. PriceService , for pricing a single product. Additionally, ExpandArgumentsService lets you debug how the arguments you pass to the other services are expanded."
  },
  "guides/vtc.html": {
    "href": "guides/vtc.html",
    "title": "VTC command line tool | Configit VT SDK",
    "keywords": "VTC command line tool Creating a VT package from a legacy Quote package The flow for converting a legacy Quote Package is more complicated as new source data can be added and existing customizations shouldn't be deleted. Create initial VT project by converting legacy package Manually edit files used for customization - arguments and custom scripts. Build the new package Test (not implemented yet) Publish Reconvert new extract of legacy package (at the moment the changes must be merged manually, i.e. create a new VT project and copy the wanted changes into the existing VT project) If needed re-edit customization files Build the new package Test (not implemented yet) Publish What is important in this flow is that the source data can be regenerated, but the manually edited files should not be overridden. This leads to a design where customization files can be isolated from the other source files (models, price definitions etc.) vtc commands Package Commands Create Usage: vtc package create --from <PathToLegacyQuotePackage> This creates a new VT project from an existing Quote package. This command generates a new project in the current folder. The folder structure will be as shown below: <project-directory> |--quote-package-dev | |--src | | |--price # scripts for price customizations | | `--solve # scripts for solver customizations | `--resources # resources for the VT project `--config.json # VT project configuration Build Usage: vtc package build This command reads the settings from the config.json file in the current directory and builds the project into a VT package. The VT package is stored locally, by default in an output folder within the VT project folder. Publish Usage: vtc package publish <publish-target> This command publishes the VT package built by the build command to the resource repository. This enables the package to be consumed by the Configit Cloud services. The config.json is used to determine the location of the VT package. The <publish-target> must refer to a publish target defined in the config.json file - E.g. prod in the example below: { ..., \"publishTargets\": { \"amazon\": \"StorageType=Amazon;RegionEndpoint=eu-central-1;EncryptionKey=1o34ZWgjsq;TenantName=modeln.configit.com\", \"local\": \"StorageType=Directory;RootPath=output\\\\local-publish\" } } The create command creates a local publish target is created which will publish the VT package in the output folder. This is only meant for testing. Example The commands below show an example of how a package can be created, built and published. It assumes that a Quote called Coso package is located in c:\\data . # Create a folder for the new project mkdir Basic # Navigate into the folder cd Basic # Create new VT project from Quote package vtc package create --from c:\\data\\Basic # After editing customizations and resources, build the VT package vtc package build # Finally publish the package vtc package publish local"
  },
  "guides/vtpackages.html": {
    "href": "guides/vtpackages.html",
    "title": "VT packages | Configit VT SDK",
    "keywords": "VT packages A VT package is a collection of configurable products, standard products, pricing, view, and BOM data. VT packages have the structure: |-- boms |-- lookups |-- price |-- productmodels |-- products |-- resolver |-- views To create VT packages, use the vtc command line tool . Creating, building, and publishing a package from an existing Quote Package follows this flow: Create initial VT project by converting a legacy Quote package Manually edit files used for customization - arguments and custom scripts Build the VT package Publish the VT package To update a VT package (for instance, when your SAP master data changes): Reconvert new extract of legacy package (at the moment the changes must be merged manually, i.e. create a new VT project and copy the wanted changes into the existing VT project) If needed, re-edit customization files Build the VT package Publish the VT package This flow allows you to re-extract and re-convert packages without losing your customizations. Customizations include specifying how arguments should be expanded, and JavaScript functions for customizing the behavior when the product is configured and priced. Lookups The lookups folder contains data tables that are accessed at runtime by the API services. Product models The productmodels folder contains compiled logic for the configure API. Product models are converted from SAP extracts during package creation. Prices The price folder contains compiled price logic for the price API. Price data is converted from SAP extracts during package creation. BOMs The boms folder contains compiled BOM logic for the sublines API. The BOM is converted from SAP extracted during package creation. Views The views folder contains information of translations, properties and UI grouping. The view data is converted from an SAP extract during package creation."
  },
  "api/Configit.Configurator.Service.Response.Property.html": {
    "href": "api/Configit.Configurator.Service.Response.Property.html",
    "title": "Class Property | Configit VT SDK",
    "keywords": "Class Property A property provides additional information that can be associated with Section , ConfigurationVariable , and SingleValuedValue . Inheritance System.Object Property Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public class Property Constructors Property(String, PropertyType, Object) Initializes a new instance of Property . Declaration public Property(string name, PropertyType type, object value) Parameters Type Name Description System.String name PropertyType type System.Object value Properties Name The name of the property. For example, \"Show\". Declaration public string Name { get; } Property Value System.String Type The type of the Value . Declaration public string Type { get; } Property Value System.String Value The value of the property. For example: true , 42, or \"This is a description\". Declaration public object Value { get; } Property Value System.Object"
  },
  "api/Configit.Configurator.Service.Response.PropertyType.html": {
    "href": "api/Configit.Configurator.Service.Response.PropertyType.html",
    "title": "Enum PropertyType | Configit VT SDK",
    "keywords": "Enum PropertyType The type of a Property . Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public enum PropertyType Fields Name Description Boolean The property is a Boolean. For example, Show=false . Date The property is a date. For example, Expires=21.Dec 2017 . Number The property is a number. For example, Weight=42.0 . String The property is a string. For example, LongDescription=&quot;This a description&quot; . Uri The property is a URI. For example, Image=&quot;http://placehold.it/350x150&quot; ."
  },
  "api/Configit.Configurator.Service.Response.State.html": {
    "href": "api/Configit.Configurator.Service.Response.State.html",
    "title": "Enum State | Configit VT SDK",
    "keywords": "Enum State The internal configuration state of a variable's value. For debugging purposes. Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public enum State Fields Name Description Available The value can be freely assigned. Inferred The value is assigned for one of these reasons: As a consequence of an assignment or a default applied to another variable. It is the only value available according to the rules. It is the only value defined in the variable's domain. Selected The value is assigned, either by the user, or because it is a default value. Unavailable Depending on the Justification , the value can either not be assigned at all, or would remove one of the other assigned values."
  },
  "api/Configit.Configurator.Service.Response.StateAndJustification.html": {
    "href": "api/Configit.Configurator.Service.Response.StateAndJustification.html",
    "title": "Class StateAndJustification | Configit VT SDK",
    "keywords": "Class StateAndJustification The internal State and Justification of a variable's value. For debugging purposes. Inheritance System.Object StateAndJustification Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public class StateAndJustification Constructors StateAndJustification(State, Justification) Initializes a new instance of StateAndJustification . Declaration public StateAndJustification(State state, Justification justification) Parameters Type Name Description State state Justification justification Properties Justification Provides context for how the configuration engine determined the value's state. Declaration public Justification Justification { get; } Property Value Justification State Describes whether the value is assigned, can be assigned, and the consequences of assigning it. Declaration public State State { get; } Property Value State"
  },
  "api/Configit.Configurator.Service.ServiceSettings.html": {
    "href": "api/Configit.Configurator.Service.ServiceSettings.html",
    "title": "Class ServiceSettings | Configit VT SDK",
    "keywords": "Class ServiceSettings Class representation of settings used to create services Inheritance System.Object ServiceSettings Namespace : Configit.Configurator.Service Assembly : Configit.Configurator.Service.dll Syntax public class ServiceSettings Constructors ServiceSettings() Create a new instance of ServiceSettings Declaration public ServiceSettings() ServiceSettings(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, String) Create a new instance of ServiceSettings Declaration public ServiceSettings(int cacheTimeoutInSeconds = 100, int productCacheMaxItems = 10, int priceDefinitionCacheMaxItems = 10, int argumentsDefinitionCacheMaxItems = 10, int lookupCollectionCacheMaxItems = 10, int scriptCacheMaxItems = 100, int bomCacheMaxItems = 10, int scriptPoolSize = 4, string sourceConnectionString = null) Parameters Type Name Description System.Int32 cacheTimeoutInSeconds System.Int32 productCacheMaxItems System.Int32 priceDefinitionCacheMaxItems System.Int32 argumentsDefinitionCacheMaxItems System.Int32 lookupCollectionCacheMaxItems System.Int32 scriptCacheMaxItems System.Int32 bomCacheMaxItems System.Int32 scriptPoolSize System.String sourceConnectionString Properties ArgumentsDefinitionCacheMaxItems Maximum number of cached argument definitions. Increasing this can lead to high memory usage. Defaults to 10. Declaration public int ArgumentsDefinitionCacheMaxItems { get; set; } Property Value System.Int32 BomCacheMaxItems Maximum number of cached BOM definitions. Increasing this can lead to high memory usage. Defaults to 10. Declaration public int BomCacheMaxItems { get; set; } Property Value System.Int32 CacheTimeoutInSeconds Number of seconds when the cache of loaded resources should timeout. Loaded resources are price procedures, product models etc. These are loaded once from the resource repository and kept in memory. When a resource times out, then the next request for the given resource will check if there is a newer available version. If there is a newer version, then the cache updates accordingly. Defaults to 100. Declaration public int CacheTimeoutInSeconds { get; set; } Property Value System.Int32 LookupCollectionCacheMaxItems Maximum number of cached lookup collections. Increasing this can lead to high memory usage. Defaults to 10. Declaration public int LookupCollectionCacheMaxItems { get; set; } Property Value System.Int32 PriceDefinitionCacheMaxItems Maximum number of cached price definitions. Increasing this can lead to high memory usage. Defaults to 10. Declaration public int PriceDefinitionCacheMaxItems { get; set; } Property Value System.Int32 ProductCacheMaxItems Maximum number of cached product models. Increasing this can lead to high memory usage. Defaults to 10. Declaration public int ProductCacheMaxItems { get; set; } Property Value System.Int32 ScriptCacheMaxItems Maximum number of cached scripts Increasing this can lead to high memory usage. Defaults to 100. Declaration public int ScriptCacheMaxItems { get; set; } Property Value System.Int32 ScriptPoolSize Number of script engines in pool. Increasing this can lead to high memory usage. Defaults to 4. Declaration public int ScriptPoolSize { get; set; } Property Value System.Int32 SourceConnectionString Specify where the packages are located, and how to connect to them. Declaration public string SourceConnectionString { get; set; } Property Value System.String"
  },
  "api/Configit.Configurator.Service.Response.Justification.html": {
    "href": "api/Configit.Configurator.Service.Response.Justification.html",
    "title": "Enum Justification | Configit VT SDK",
    "keywords": "Enum Justification The internal justification of a value's State . For debugging purposes. Provides context for how the configuration engine determined the value's state. Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public enum Justification Fields Name Description Assignment If State is Selected , it is because the value was assigned in the request. If State is Unavailable or Inferred , it is due to an assignment to other variable(s) in combination with the rules. Default If State is Selected , it is because it is a default value. If State is Unavailable or Inferred , it is because another default value was assigned. None A value with state Available has no Justification . Phase The value state is due to assignments, defaults, and/or rules from a previous phase. Only applies to Unavailable or Inferred , and only when the phases are defined in the model or request. Rule The State is exclusively due to rules, and not because of other assignments."
  },
  "api/Configit.Configurator.Service.Response.Line.html": {
    "href": "api/Configit.Configurator.Service.Response.Line.html",
    "title": "Class Line | Configit VT SDK",
    "keywords": "Class Line Represents a line in SublinesResponse .Lines. Inheritance System.Object Line Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public class Line Properties Id ID of the line. Declaration public string Id { get; } Property Value System.String ParentId The line's parent ID. Declaration public string ParentId { get; } Property Value System.String Remarks If the line's parent is the root line, this refers to Id . Otherwise, it refers to a Id . PriceSheet The price sheet of the line. Declaration public PriceSheet PriceSheet { get; } Property Value PriceSheet Product The product associated with the line. Declaration public Product Product { get; } Property Value Product Quantity The Quantity of the line. Declaration public ValueWithUnit Quantity { get; } Property Value ValueWithUnit StateHash Provides a hash based on the configuration state of this line as it would be obtained by calling the configure endpoint. Declaration public string StateHash { get; } Property Value System.String"
  },
  "api/Configit.Configurator.Service.Response.PriceResponse.html": {
    "href": "api/Configit.Configurator.Service.Response.PriceResponse.html",
    "title": "Class PriceResponse | Configit VT SDK",
    "keywords": "Class PriceResponse Response object returned by PriceAsync(PriceRequest) . The response includes a pricing sheet with price lines and totals, the arguments used by the service, and (optionally) debug information. Inheritance System.Object PriceResponse Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public class PriceResponse Constructors PriceResponse(PriceSheet, RemovedAssignments, Trace, String, ExpandoObject) Initializes a new instance of PriceResponse . Declaration public PriceResponse(PriceSheet priceSheet, RemovedAssignments removedAssignments, Trace trace, string packagePath, ExpandoObject arguments = null) Parameters Type Name Description PriceSheet priceSheet RemovedAssignments removedAssignments Trace trace System.String packagePath System.Dynamic.ExpandoObject arguments Properties Arguments Contains the original request arguments, plus any (such as variants) added by the service. Declaration public ExpandoObject Arguments { get; } Property Value System.Dynamic.ExpandoObject Debug Optional debug information, provided when PriceSettings .Debug is true in the request. Declaration public Debug Debug { get; } Property Value Debug PackagePath The versioned package path used for generating this response. Even though the Configit.Configurator.Service.Request.IRequest.PackagePath is unversioned, this property will always contain the versioned path. Subsequent requests within the same configuration session should use the same versioned package path. Declaration public string PackagePath { get; } Property Value System.String PriceSheet The PriceSheet containing the price lines and totals. Declaration public PriceSheet PriceSheet { get; } Property Value PriceSheet RemovedAssignments A collection of assignments removed by the configure service. Declaration public RemovedAssignments RemovedAssignments { get; } Property Value RemovedAssignments"
  },
  "api/Configit.Configurator.Service.Response.PriceSheet.html": {
    "href": "api/Configit.Configurator.Service.Response.PriceSheet.html",
    "title": "Class PriceSheet | Configit VT SDK",
    "keywords": "Class PriceSheet Contains the price lines and pricing summary (net value, taxes, and total price) for a product. A price sheet is part of the PriceResponse returned by PriceAsync(PriceRequest) . Inheritance System.Object PriceSheet Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public class PriceSheet Constructors PriceSheet(String, Boolean, IReadOnlyList<PriceLine>, PriceSummary) Initializes a new instance of PriceSheet . Declaration public PriceSheet(string id, bool isInvalid, IReadOnlyList<PriceLine> priceLines, PriceSummary totals) Parameters Type Name Description System.String id System.Boolean isInvalid System.Collections.Generic.IReadOnlyList < PriceLine > priceLines PriceSummary totals Properties Id Gets the internal ID. Declaration public string Id { get; } Property Value System.String IsInvalid Returns true if any of the price lines are invalid. For example, when there is a mismatch of units, or a division by zero error. Declaration public bool IsInvalid { get; set; } Property Value System.Boolean PriceLines The price lines comprising the sheet. See PriceLine . Declaration public IReadOnlyList<PriceLine> PriceLines { get; } Property Value System.Collections.Generic.IReadOnlyList < PriceLine > Totals Net value, taxes, and total price of the product. Declaration public PriceSummary Totals { get; } Property Value PriceSummary"
  },
  "api/Configit.Configurator.Service.Response.SingletonValue.html": {
    "href": "api/Configit.Configurator.Service.Response.SingletonValue.html",
    "title": "Class SingletonValue | Configit VT SDK",
    "keywords": "Class SingletonValue Represents a single value, such as string, number, or date. Inheritance System.Object ConfigurationValue SingleValuedValue SingletonValue Inherited Members SingleValuedValue.State SingleValuedValue.InternalState ConfigurationValue.Text Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public class SingletonValue : SingleValuedValue Constructors SingletonValue(String, Object, ConfigurationValueState, StateAndJustification, IEnumerable<Property>) Initializes a new instance of SingletonValue . Declaration public SingletonValue(string text, object value, ConfigurationValueState state, StateAndJustification internalState, IEnumerable<Property> properties = null) Parameters Type Name Description System.String text System.Object value ConfigurationValueState state StateAndJustification internalState System.Collections.Generic.IEnumerable < Property > properties Properties Properties Properties providing additional information about the variable. Declaration public IEnumerable<Property> Properties { get; } Property Value System.Collections.Generic.IEnumerable < Property > Value The value, which may be a string, number, or date. For example: \"RED\", 42, 12.Dec 2015. Declaration public object Value { get; } Property Value System.Object"
  },
  "api/Configit.Configurator.Service.Request.PriceRequest.html": {
    "href": "api/Configit.Configurator.Service.Request.PriceRequest.html",
    "title": "Class PriceRequest | Configit VT SDK",
    "keywords": "Class PriceRequest The request object for PriceAsync(PriceRequest) . Inheritance System.Object PriceRequest Namespace : Configit.Configurator.Service.Request Assembly : Configit.Configurator.Service.dll Syntax public class PriceRequest : IRequest, IMultilevelRequest Constructors PriceRequest(String, String, String, DateTime, String, String, IReadOnlyList<LineAssignment>, ExpandoObject, String, ValueWithUnit, IReadOnlyList<VariableAssignment>, IReadOnlyList<PriceLineAssignment>, ExpandoObject, PriceSettings) Initializes a new instance of PriceRequest . Declaration public PriceRequest(string packagePath = null, string language = null, string currency = null, DateTime date = null, string priceReportId = null, string lineId = null, IReadOnlyList<LineAssignment> lineAssignments = null, ExpandoObject globalArguments = null, string productId = null, ValueWithUnit quantity = null, IReadOnlyList<VariableAssignment> variableAssignments = null, IReadOnlyList<PriceLineAssignment> priceLineAssignments = null, ExpandoObject arguments = null, PriceSettings settings = null) Parameters Type Name Description System.String packagePath System.String language System.String currency System.DateTime date System.String priceReportId System.String lineId System.Collections.Generic.IReadOnlyList < LineAssignment > lineAssignments System.Dynamic.ExpandoObject globalArguments System.String productId ValueWithUnit quantity System.Collections.Generic.IReadOnlyList < VariableAssignment > variableAssignments System.Collections.Generic.IReadOnlyList < PriceLineAssignment > priceLineAssignments System.Dynamic.ExpandoObject arguments PriceSettings settings Properties Arguments Arguments that apply to the root line in the configuration. When working with a multilevel configuration, put any arguments common to all line (such as currency) in GlobalArguments . Declaration public ExpandoObject Arguments { get; set; } Property Value System.Dynamic.ExpandoObject Currency Declaration public string Currency { get; set; } Property Value System.String Date Declaration public DateTime Date { get; set; } Property Value System.DateTime GlobalArguments Declaration public ExpandoObject GlobalArguments { get; set; } Property Value System.Dynamic.ExpandoObject Language Declaration public string Language { get; set; } Property Value System.String LineAssignments Declaration public IReadOnlyList<LineAssignment> LineAssignments { get; set; } Property Value System.Collections.Generic.IReadOnlyList < LineAssignment > LineId Declaration public string LineId { get; set; } Property Value System.String PackagePath Declaration public string PackagePath { get; set; } Property Value System.String PriceLineAssignments A collection of user-defined price line assignments. Declaration public IReadOnlyList<PriceLineAssignment> PriceLineAssignments { get; set; } Property Value System.Collections.Generic.IReadOnlyList < PriceLineAssignment > PriceReportId Declaration public string PriceReportId { get; set; } Property Value System.String ProductId The ID of the product to configure. Declaration public string ProductId { get; set; } Property Value System.String Quantity The quantity of the product to price. If product is a product of a subline, the quantity should be the quantity given in the SublinesResponse provided by SublinesService . Declaration public ValueWithUnit Quantity { get; set; } Property Value ValueWithUnit Settings Settings that specify whether to prevent argument expansion, and whether to include debug information in PriceResponse . Declaration public PriceSettings Settings { get; set; } Property Value PriceSettings VariableAssignments A collection of user-defined variable assignments. Declaration public IReadOnlyList<VariableAssignment> VariableAssignments { get; set; } Property Value System.Collections.Generic.IReadOnlyList < VariableAssignment >"
  },
  "api/Configit.Configurator.Service.Request.VariableAssignment.html": {
    "href": "api/Configit.Configurator.Service.Request.VariableAssignment.html",
    "title": "Class VariableAssignment | Configit VT SDK",
    "keywords": "Class VariableAssignment Represents a value assignment to a variable. Inheritance System.Object VariableAssignment Namespace : Configit.Configurator.Service.Request Assembly : Configit.Configurator.Service.dll Syntax public class VariableAssignment Constructors VariableAssignment(String, Object, Nullable<Int32>, Nullable<Boolean>) Initializes a new instance of VariableAssignment . Declaration public VariableAssignment(string variableId, object value, int ? priority = null, bool ? exclude = null) Parameters Type Name Description System.String variableId The ID of the variable to assign to. System.Object value The value to assign to the variable. System.Nullable < System.Int32 > priority The priority of the assignment. Unsupported by SAP products. System.Nullable < System.Boolean > exclude Set to true to exclude the value . Applies to multi-assignment variables (where AllowMultipleAssignments is true ). Properties Exclude Set to true to exclude the Value . Applies to multi-assignment variables (where AllowMultipleAssignments is true ). Declaration public bool ? Exclude { get; } Property Value System.Nullable < System.Boolean > Priority The priority of the assignment. When the configure service removes assignments, it removes them in order of lowest priority to highest priority. You can use priority to ensure that the user's most recent assignment will be the last one removed by setting its priority to a high value and lowering the value of other assigments. Note This property is unsupported by SAP products. Declaration public int ? Priority { get; } Property Value System.Nullable < System.Int32 > Value The value to assign to the variable. Declaration public object Value { get; } Property Value System.Object VariableId The ID of the variable to assign to. Declaration public string VariableId { get; } Property Value System.String"
  },
  "api/Configit.Configurator.Service.Response.ConfigurationVariable.html": {
    "href": "api/Configit.Configurator.Service.Response.ConfigurationVariable.html",
    "title": "Class ConfigurationVariable | Configit VT SDK",
    "keywords": "Class ConfigurationVariable Represents a variable in the configuration. A variable has a ValueType , Values , Text , Properties . Inheritance System.Object ConfigurationVariable Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public class ConfigurationVariable Constructors ConfigurationVariable(String, String, String, Boolean, Nullable<Double>, IEnumerable<ConfigurationValue>, IEnumerable<Property>, VariableAssignment, IEnumerable<Issue>) Initializes a new instance of ConfigurationVariable . Declaration public ConfigurationVariable(string id, string text, string valueType, bool allowMultipleAssignments, double ? distinctValueCount, IEnumerable<ConfigurationValue> values, IEnumerable<Property> properties, VariableAssignment removedAssignment, IEnumerable<Issue> issues) Parameters Type Name Description System.String id System.String text System.String valueType System.Boolean allowMultipleAssignments System.Nullable < System.Double > distinctValueCount System.Collections.Generic.IEnumerable < ConfigurationValue > values System.Collections.Generic.IEnumerable < Property > properties VariableAssignment removedAssignment System.Collections.Generic.IEnumerable < Issue > issues Properties AllowMultipleAssignments Whether multiple values can be assigned to this variable at the same time. Variables that can accept multiple assignments are referred to as multi-assignment variables . Declaration public bool AllowMultipleAssignments { get; } Property Value System.Boolean DistinctValueCount Number of distinct values in Values. Declaration public double ? DistinctValueCount { get; } Property Value System.Nullable < System.Double > Id The ID of the variable. Declaration public string Id { get; } Property Value System.String Issues Configurator issues related to the variable. If one of its assigned values is involved in a conflict, Issues provides information about how to fix the value. Declaration public IEnumerable<Issue> Issues { get; } Property Value System.Collections.Generic.IEnumerable < Issue > Properties Properties that provide additional information about the variable. One way to use properties is to pass information to yoour your application that the variable needs special treatment in the UI. For example, a \"Required\" property for drawing the user's attention to the variable in the configurator, or a \"Show\" property indiciating whether or not to show the variable in the UI. Declaration public IEnumerable<Property> Properties { get; } Property Value System.Collections.Generic.IEnumerable < Property > RemovedAssignment The assignment removed from the variable, if any. Declaration public VariableAssignment RemovedAssignment { get; } Property Value VariableAssignment Remarks The configure service removes assignments when other assignments are made to values that are incompatible ( IsIncompatible ) or are never assignable ( IsNeverAssignable ). Note This property is unsupported by SAP products. Text The text to display, representing the variable's name. The text is translated based on the language in the request. Declaration public string Text { get; } Property Value System.String Values The values that can be assigned to this variable. Declaration public IEnumerable<ConfigurationValue> Values { get; } Property Value System.Collections.Generic.IEnumerable < ConfigurationValue > ValueType The type of the values in the Values collection. Declaration public string ValueType { get; } Property Value System.String"
  },
  "api/Configit.Configurator.Service.Response.ExpandArgumentsResponse.html": {
    "href": "api/Configit.Configurator.Service.Response.ExpandArgumentsResponse.html",
    "title": "Class ExpandArgumentsResponse | Configit VT SDK",
    "keywords": "Class ExpandArgumentsResponse Response of ExpandArgumentsAsync(ExpandArgumentsRequest) , containing the expanded arguments. Inheritance System.Object ExpandArgumentsResponse Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public class ExpandArgumentsResponse Constructors ExpandArgumentsResponse(ExpandoObject, String) Initializes a new instance of ExpandArgumentsResponse . Declaration public ExpandArgumentsResponse(ExpandoObject arguments, string packagePath) Parameters Type Name Description System.Dynamic.ExpandoObject arguments The System.Dynamic.ExpandoObject arguments. System.String packagePath The versioned package path used during expansion. Properties Arguments Arguments expanded based on the arguments given in ExpandArgumentsRequest . Declaration public ExpandoObject Arguments { get; set; } Property Value System.Dynamic.ExpandoObject PackagePath The versioned package path used for generating this response. Even though the Configit.Configurator.Service.Request.IRequest.PackagePath is unversioned, this property will always contain the versioned path. Subsequent requests within the same configuration session should use the same versioned package path. Declaration public string PackagePath { get; } Property Value System.String"
  },
  "api/Configit.Configurator.Service.Response.PriceLineRate.html": {
    "href": "api/Configit.Configurator.Service.Response.PriceLineRate.html",
    "title": "Class PriceLineRate | Configit VT SDK",
    "keywords": "Class PriceLineRate The price line rate, used to calculate the Result . Inheritance System.Object PriceLineRate Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public class PriceLineRate Constructors PriceLineRate(Boolean, Boolean, ValueWithUnit, Nullable<Decimal>, Nullable<Decimal>, String, String, Decimal) Initializes a new instance of PriceLineRate . Declaration public PriceLineRate(bool isAssignable, bool isAssigned, ValueWithUnit batchSize, decimal ? upperLimit, decimal ? lowerLimit, string signConstraint, string unit, decimal value) Parameters Type Name Description System.Boolean isAssignable System.Boolean isAssigned ValueWithUnit batchSize System.Nullable < System.Decimal > upperLimit System.Nullable < System.Decimal > lowerLimit System.String signConstraint System.String unit System.Decimal value Properties BatchSize The size and unit (batch) describing how the price line is sold. Declaration public ValueWithUnit BatchSize { get; } Property Value ValueWithUnit IsAssignable Whether the price line can be assigned in a PriceLineAssignment ( true ) or is read-only ( false ). Declaration public bool IsAssignable { get; } Property Value System.Boolean IsAssigned Whether the price line was assigned in a PriceLineAssignment ( true ) or not ( false ). Declaration public bool IsAssigned { get; } Property Value System.Boolean LowerLimit The lowest possible value that Value can be. This property is optional. Declaration public decimal ? LowerLimit { get; } Property Value System.Nullable < System.Decimal > SignConstraint Determines if the Value is constrained to a sign. Possible values: \"Positive\": Value must be greater than or equal to zero. \"Negative\": Value must be less than or equal to zero. \"None\": Value can be either positive or negative. Declaration public string SignConstraint { get; } Property Value System.String Unit The Value 's unit of measurement. Declaration public string Unit { get; } Property Value System.String UpperLimit The highest possible value that Value can be. This property is optional. Declaration public decimal ? UpperLimit { get; } Property Value System.Nullable < System.Decimal > Value The value. See Unit for the value's unit of measurement. Declaration public decimal Value { get; } Property Value System.Decimal"
  },
  "api/Configit.Configurator.Service.Response.PriceLineStatus.html": {
    "href": "api/Configit.Configurator.Service.Response.PriceLineStatus.html",
    "title": "Class PriceLineStatus | Configit VT SDK",
    "keywords": "Class PriceLineStatus Explains if a price line is disabled, invalid, or is for informational purposes. In any of these cases, the price line does not contribute to the price. Inheritance System.Object PriceLineStatus Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public class PriceLineStatus Constructors PriceLineStatus(PriceLineStatus) Initializes a new instance of PriceLineStatus . Declaration public PriceLineStatus(PriceLineStatus status) Parameters Type Name Description Configit.Price.Interface.Response.PriceLineStatus status Properties DisabledReasons Explains why the price line is disabled. Declaration public IEnumerable<string> DisabledReasons { get; } Property Value System.Collections.Generic.IEnumerable < System.String > InvalidReasons Explains why the price line is invalid. Declaration public IEnumerable<string> InvalidReasons { get; } Property Value System.Collections.Generic.IEnumerable < System.String > IsDisabled Whether the price line is disabled or not. Price lines can become disabled by the pricing procedure. Disabled price lines do not contribute to the product's pricing. Declaration public bool IsDisabled { get; } Property Value System.Boolean IsInformational The price line is for purely informational purposes, such as a subtotal or statistical value, and does not contribute to the product's pricing. Declaration public bool IsInformational { get; } Property Value System.Boolean IsInvalid Whether the price line is invalid or not. This can happen, for example, because of a division by zero error or a mismatch in units. Invalid price lines do not contribute to the product's pricing. Declaration public bool IsInvalid { get; } Property Value System.Boolean"
  },
  "api/Configit.Configurator.Service.Response.RemovedAssignments.html": {
    "href": "api/Configit.Configurator.Service.Response.RemovedAssignments.html",
    "title": "Class RemovedAssignments | Configit VT SDK",
    "keywords": "Class RemovedAssignments Variable and/or price line assignments that was removed from a configure and/or price request. Inheritance System.Object RemovedAssignments Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public class RemovedAssignments Properties PriceLineAssignments A collection of assignments removed by the price service. It removes them when assignments have been made to non existing price lines. This can easily happen to assignments to price lines of variant that was removed during configuration. Clients should use these values to update their state. Declaration public IEnumerable<PriceLineAssignment> PriceLineAssignments { get; } Property Value System.Collections.Generic.IEnumerable < PriceLineAssignment > VariableAssignments A collection of assignments removed by the configure service. It removes them when: Other assignments are made to values that are incompatible ( IsIncompatible ). Other assignments are made to values that are never assignable ( IsNeverAssignable ). Multiple assignments are made to the same variable, and the variable does not allow multiple assigments ( AllowMultipleAssignments is false ). In this case, the last assignment is preserved, and all others are removed. Declaration public IEnumerable<VariableAssignment> VariableAssignments { get; } Property Value System.Collections.Generic.IEnumerable < VariableAssignment > Remarks Note For SAP products, assignments to ConfigurationValue with the state IsIncompatible are not added to RemovedAssignments ."
  },
  "api/Configit.Configurator.Service.Response.Section.html": {
    "href": "api/Configit.Configurator.Service.Response.Section.html",
    "title": "Class Section | Configit VT SDK",
    "keywords": "Class Section A section represents a grouping of variables. Sections are defined in views. Sections provide the structure for how to present the variables visually. For instance, each section could be displayed as a sheet in a tabbed control. A section may contain subsections. Inheritance System.Object Section Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public class Section Constructors Section(String, String, IEnumerable<ConfigurationVariable>, IEnumerable<Property>, IEnumerable<Section>) Initializes a new instance of Section . Declaration public Section(string id, string text, IEnumerable<ConfigurationVariable> variables, IEnumerable<Property> properties, IEnumerable<Section> sections) Parameters Type Name Description System.String id System.String text System.Collections.Generic.IEnumerable < ConfigurationVariable > variables System.Collections.Generic.IEnumerable < Property > properties System.Collections.Generic.IEnumerable < Section > sections Properties Id The ID of the section. Declaration public string Id { get; } Property Value System.String Properties Miscellaneous properties. Declaration public IEnumerable<Property> Properties { get; } Property Value System.Collections.Generic.IEnumerable < Property > Sections The section's subsections, if any. Declaration public IEnumerable<Section> Sections { get; } Property Value System.Collections.Generic.IEnumerable < Section > Text The text to display, representing the section's name. The text is translated based on the language in the request. Declaration public string Text { get; } Property Value System.String Variables The collection of ConfigurationVariable objects belonging to this section. Declaration public IEnumerable<ConfigurationVariable> Variables { get; } Property Value System.Collections.Generic.IEnumerable < ConfigurationVariable >"
  },
  "api/Configit.Configurator.Service.Exceptions.InvalidRequestException.html": {
    "href": "api/Configit.Configurator.Service.Exceptions.InvalidRequestException.html",
    "title": "Class InvalidRequestException | Configit VT SDK",
    "keywords": "Class InvalidRequestException Thrown when a request to a configurator contains an invalid argument. Inheritance System.Object System.Exception ConfiguratorException InvalidRequestException Namespace : Configit.Configurator.Service.Exceptions Assembly : Configit.Configurator.Service.dll Syntax public class InvalidRequestException : ConfiguratorException"
  },
  "api/Configit.Configurator.Service.Exceptions.UnexpectedException.html": {
    "href": "api/Configit.Configurator.Service.Exceptions.UnexpectedException.html",
    "title": "Class UnexpectedException | Configit VT SDK",
    "keywords": "Class UnexpectedException Thrown when an unexpected exception occured during a call to one of the configurator services. Inheritance System.Object System.Exception ConfiguratorException UnexpectedException Namespace : Configit.Configurator.Service.Exceptions Assembly : Configit.Configurator.Service.dll Syntax public class UnexpectedException : ConfiguratorException"
  },
  "api/Configit.Configurator.Service.Request.ConfigureRequest.html": {
    "href": "api/Configit.Configurator.Service.Request.ConfigureRequest.html",
    "title": "Class ConfigureRequest | Configit VT SDK",
    "keywords": "Class ConfigureRequest The request object for ConfigureAsync(ConfigureRequest) . Inheritance System.Object ConfigureRequest Namespace : Configit.Configurator.Service.Request Assembly : Configit.Configurator.Service.dll Syntax public class ConfigureRequest : IRequest, IMultilevelRequest Constructors ConfigureRequest(String, String, String, DateTime, String, String, IReadOnlyList<LineAssignment>, ExpandoObject, String, ValueWithUnit, IReadOnlyList<VariableAssignment>, IReadOnlyList<PriceLineAssignment>, ExpandoObject, String, ConfigureSettings) Initializes a new instance of ConfigureRequest . Declaration public ConfigureRequest(string packagePath = null, string language = null, string currency = null, DateTime date = null, string priceReportId = null, string lineId = null, IReadOnlyList<LineAssignment> lineAssignments = null, ExpandoObject globalArguments = null, string productId = null, ValueWithUnit quantity = null, IReadOnlyList<VariableAssignment> variableAssignments = null, IReadOnlyList<PriceLineAssignment> priceLineAssignments = null, ExpandoObject arguments = null, string viewId = null, ConfigureSettings settings = null) Parameters Type Name Description System.String packagePath System.String language System.String currency System.DateTime date System.String priceReportId System.String lineId System.Collections.Generic.IReadOnlyList < LineAssignment > lineAssignments System.Dynamic.ExpandoObject globalArguments System.String productId ValueWithUnit quantity System.Collections.Generic.IReadOnlyList < VariableAssignment > variableAssignments System.Collections.Generic.IReadOnlyList < PriceLineAssignment > priceLineAssignments System.Dynamic.ExpandoObject arguments System.String viewId ConfigureSettings settings Properties Arguments Arguments that apply to the line being configured. For multilevel products, put any arguments common to all lines (such as currency) in GlobalArguments . Declaration public ExpandoObject Arguments { get; set; } Property Value System.Dynamic.ExpandoObject Currency Declaration public string Currency { get; set; } Property Value System.String Date Declaration public DateTime Date { get; set; } Property Value System.DateTime GlobalArguments Declaration public ExpandoObject GlobalArguments { get; set; } Property Value System.Dynamic.ExpandoObject Language Declaration public string Language { get; set; } Property Value System.String LineAssignments Declaration public IReadOnlyList<LineAssignment> LineAssignments { get; set; } Property Value System.Collections.Generic.IReadOnlyList < LineAssignment > LineId Declaration public string LineId { get; set; } Property Value System.String PackagePath Declaration public string PackagePath { get; set; } Property Value System.String PriceLineAssignments A collection of user-defined price line assignments. Declaration public IReadOnlyList<PriceLineAssignment> PriceLineAssignments { get; set; } Property Value System.Collections.Generic.IReadOnlyList < PriceLineAssignment > PriceReportId Declaration public string PriceReportId { get; set; } Property Value System.String ProductId The ID of the product to configure. Declaration public string ProductId { get; set; } Property Value System.String Quantity The quantity of the product, used when calculating prices. If product is a product of a subline, the quantity should be the quantity given in the SublinesResponse provided by SublinesService . Declaration public ValueWithUnit Quantity { get; set; } Property Value ValueWithUnit Settings Settings for changing the default behavior of the service, including which content to return in ConfigureResponse . Declaration public ConfigureSettings Settings { get; set; } Property Value ConfigureSettings VariableAssignments A collection of user-defined variable assignments. Declaration public IReadOnlyList<VariableAssignment> VariableAssignments { get; set; } Property Value System.Collections.Generic.IReadOnlyList < VariableAssignment > ViewId The ID of the view to use. Determines how the ConfigurationVariable s are organized into Sections in the response. Declaration public string ViewId { get; set; } Property Value System.String"
  },
  "api/Configit.Configurator.Service.Request.ExpandArgumentsRequest.html": {
    "href": "api/Configit.Configurator.Service.Request.ExpandArgumentsRequest.html",
    "title": "Class ExpandArgumentsRequest | Configit VT SDK",
    "keywords": "Class ExpandArgumentsRequest The request object for ExpandArgumentsAsync(ExpandArgumentsRequest) . Inheritance System.Object ExpandArgumentsRequest Namespace : Configit.Configurator.Service.Request Assembly : Configit.Configurator.Service.dll Syntax public class ExpandArgumentsRequest Properties Arguments The arguments to expand. Declaration public ExpandoObject Arguments { get; set; } Property Value System.Dynamic.ExpandoObject PackagePath Path to the package used to expand the arguments. Declaration public string PackagePath { get; set; } Property Value System.String"
  },
  "api/Configit.Configurator.Service.Request.PriceSettings.html": {
    "href": "api/Configit.Configurator.Service.Request.PriceSettings.html",
    "title": "Class PriceSettings | Configit VT SDK",
    "keywords": "Class PriceSettings For changing the behavior of PriceService . All settings are false by default. Setting When true PreventArgumentExpansion Prevents the service from expanding arguments. You are responsible for passing expanded arguments in the request. Inherited from BaseSettings . Debug PriceResponse includes debug information (see Debug ). Inherited from BaseSettings . This class intentionally has no content. See BaseSettings for the base implementation. Inheritance System.Object BaseSettings PriceSettings Inherited Members BaseSettings.Debug Namespace : Configit.Configurator.Service.Request Assembly : Configit.Configurator.Service.dll Syntax public class PriceSettings : BaseSettings"
  },
  "api/Configit.Configurator.Service.Request.html": {
    "href": "api/Configit.Configurator.Service.Request.html",
    "title": "Namespace Configit.Configurator.Service.Request | Configit VT SDK",
    "keywords": "Namespace Configit.Configurator.Service.Request Classes BaseSettings Base class for ConfigureSettings , PriceSettings , and SublinesSettings . ConfigureRequest The request object for ConfigureAsync(ConfigureRequest) . ConfigureSettings For changing the behavior of ConfigureService . ExpandArgumentsRequest The request object for ExpandArgumentsAsync(ExpandArgumentsRequest) . LineAssignment Represents assignments to a Line in a subline tree. Line assignments can array both assignments to the configurator VariableAssignment and assignments to the price calculation PriceLineAssignments . Each line in a subline tree can also have its own Arguments PriceLineAssignment Represents a value assignment to a price line. Used in ConfigureRequest and PriceRequest . PriceRequest The request object for PriceAsync(PriceRequest) . PriceSettings For changing the behavior of PriceService . All settings are false by default. Setting When true PreventArgumentExpansion Prevents the service from expanding arguments. You are responsible for passing expanded arguments in the request. Inherited from BaseSettings . Debug PriceResponse includes debug information (see Debug ). Inherited from BaseSettings . This class intentionally has no content. See BaseSettings for the base implementation. SublinesRequest Request for the SublinesAsync(SublinesRequest) SublinesSettings For changing the behavior of SublinesService . All settings are false by default. Setting When true PreventArgumentExpansion Prevents the service from expanding arguments. You are responsible for passing expanded arguments in the request. Inherited from BaseSettings . IncludePriceLines SublinesResponse includes PriceLine s in the returned PriceSheet s. For debugging purposes. Debug SublinesResponse includes debug information (see Debug ) . Inherited from BaseSettings . This class intentionally has no content. See BaseSettings for the base implementation. VariableAssignment Represents a value assignment to a variable."
  },
  "api/Configit.Configurator.Service.Response.Debug.html": {
    "href": "api/Configit.Configurator.Service.Response.Debug.html",
    "title": "Class Debug | Configit VT SDK",
    "keywords": "Class Debug Debug information for the configure service. Inheritance System.Object Debug Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public class Debug Constructors Debug(String, Trace) Initializes a new instance of Debug . Declaration public Debug(string solveTrace = null, Trace priceTrace = null) Parameters Type Name Description System.String solveTrace Trace priceTrace Properties PriceTrace Use the price trace to see which arguments are needed to calculate the right price. Declaration public Trace PriceTrace { get; } Property Value Trace SolveTrace Use the solve trace to see how values are assigned in the configuration. Declaration public string SolveTrace { get; } Property Value System.String"
  },
  "api/Configit.Configurator.Service.SublinesService.html": {
    "href": "api/Configit.Configurator.Service.SublinesService.html",
    "title": "Class SublinesService | Configit VT SDK",
    "keywords": "Class SublinesService Gets sublines for a single product. Inheritance System.Object SublinesService Namespace : Configit.Configurator.Service Assembly : Configit.Configurator.Service.dll Syntax public class SublinesService Remarks A line with sublines is also referred to as a multilevel configuration or BOM. Only lines with multilevel SAP products have sublines. Constructors SublinesService(IBomSolveService, ISystemSolveService, IPriceService, IArgumentsService, IPropertyService, PackagePathVersioner) Create new SublinesService object. Instances only store the passed in \"internal\" service objects. Declaration public SublinesService(IBomSolveService bomService, ISystemSolveService solveService, IPriceService priceService, IArgumentsService argumentsService, IPropertyService propertyService, PackagePathVersioner packagePathVersioner) Parameters Type Name Description Configit.BOM.Solve.IBomSolveService bomService The internal BOM Service Configit.Core.Solve.ISystemSolveService solveService The internal solve service Configit.Price.Interface.IPriceService priceService The internal price service Configit.Arguments.Service.IArgumentsService argumentsService The internal arguments service Configit.View.Service.IPropertyService propertyService The internla property service PackagePathVersioner packagePathVersioner The package path versioner Methods SublinesAsync(SublinesRequest) Expand the line with assignments from the SublinesRequest . Declaration public Task<SublinesResponse> SublinesAsync(SublinesRequest request) Parameters Type Name Description SublinesRequest request Returns Type Description System.Threading.Tasks.Task < SublinesResponse > Exceptions Type Condition ConfiguratorException Thrown if request is invalid or an error occurred during processing. See ConfiguratorException for more details."
  },
  "api/Configit.Configurator.Service.ConfiguratorServices.html": {
    "href": "api/Configit.Configurator.Service.ConfiguratorServices.html",
    "title": "Class ConfiguratorServices | Configit VT SDK",
    "keywords": "Class ConfiguratorServices This class takes care of construction and configuration of internal Core services, and creates instances of ConfigureService , PriceService and SublinesService Inheritance System.Object ConfiguratorServices Namespace : Configit.Configurator.Service Assembly : Configit.Configurator.Service.dll Syntax public class ConfiguratorServices Constructors ConfiguratorServices(ServiceSettings) Create a new instance providing instances of ConfigureService , PriceService and SublinesService Declaration public ConfiguratorServices(ServiceSettings settings) Parameters Type Name Description ServiceSettings settings Cache settings controlling how internal services are to work, including a connection string for storage. Properties ArgumentsService Instance of ArgumentsService which can be shared by multiple threads Declaration public ArgumentsService ArgumentsService { get; } Property Value Configit.Arguments.Service.ArgumentsService ConfigureService Instance of ConfigureService which can be shared by multiple threads Declaration public ConfigureService ConfigureService { get; } Property Value ConfigureService PackagePathVersioner Instance of PackagePathVersioner which can be shared by multiple threads Declaration public PackagePathVersioner PackagePathVersioner { get; } Property Value PackagePathVersioner PriceService Instance of PriceService which can be shared by multiple threads Declaration public PriceService PriceService { get; } Property Value PriceService SublinesService Instance of SublinesService which can be shared by multiple threads Declaration public SublinesService SublinesService { get; } Property Value SublinesService"
  },
  "api/Configit.Configurator.Service.Exceptions.ConfiguratorException.html": {
    "href": "api/Configit.Configurator.Service.Exceptions.ConfiguratorException.html",
    "title": "Class ConfiguratorException | Configit VT SDK",
    "keywords": "Class ConfiguratorException Base class for exceptions thrown by configurator services. Inheritance System.Object System.Exception ConfiguratorException Derived classes CannotLoadVTPackageException InvalidRequestException MissingPropertyInRequestException UnexpectedException Namespace : Configit.Configurator.Service.Exceptions Assembly : Configit.Configurator.Service.dll Syntax public abstract class ConfiguratorException : Exception Constructors ConfiguratorException(String) Initializes a ConfiguratorException with a sole message. Declaration protected ConfiguratorException(string message) Parameters Type Name Description System.String message ConfiguratorException(String, Exception) Initializes a ConfiguratorException with a message and inner exception. Declaration protected ConfiguratorException(string message, Exception innerException) Parameters Type Name Description System.String message System.Exception innerException"
  },
  "api/Configit.Configurator.Service.Exceptions.html": {
    "href": "api/Configit.Configurator.Service.Exceptions.html",
    "title": "Namespace Configit.Configurator.Service.Exceptions | Configit VT SDK",
    "keywords": "Namespace Configit.Configurator.Service.Exceptions Classes CannotLoadVTPackageException Thrown when the package or one if its resource could not be loaded, preventing the configurator to process the request. ConfiguratorException Base class for exceptions thrown by configurator services. InvalidRequestException Thrown when a request to a configurator contains an invalid argument. MissingPropertyInRequestException Thrown when a mandatory argument is missing in a request to a configuration service. UnexpectedException Thrown when an unexpected exception occured during a call to one of the configurator services."
  },
  "api/Configit.Configurator.Service.PriceService.html": {
    "href": "api/Configit.Configurator.Service.PriceService.html",
    "title": "Class PriceService | Configit VT SDK",
    "keywords": "Class PriceService Calculates pricing for a single product. Inheritance System.Object PriceService Namespace : Configit.Configurator.Service Assembly : Configit.Configurator.Service.dll Syntax public class PriceService Methods PriceAsync(PriceRequest) Calculates pricing for a single product. Declaration public Task<PriceResponse> PriceAsync(PriceRequest request) Parameters Type Name Description PriceRequest request The product to calculate the price for and any price line assignments. Returns Type Description System.Threading.Tasks.Task < PriceResponse > The product's calculated prices. Remarks This service calculates a product's pricing based the request inputs and returns a response that includes each price line, the product's net value, taxes, and total price. The request contains: The package to use. The product to price. Any assignments to price lines. Exceptions Type Condition ConfiguratorException Thrown if request is invalid or an error occured during processing. See ConfiguratorException for more details."
  },
  "api/Configit.Configurator.Service.Request.LineAssignment.html": {
    "href": "api/Configit.Configurator.Service.Request.LineAssignment.html",
    "title": "Class LineAssignment | Configit VT SDK",
    "keywords": "Class LineAssignment Represents assignments to a Line in a subline tree. Line assignments can array both assignments to the configurator VariableAssignment and assignments to the price calculation PriceLineAssignments . Each line in a subline tree can also have its own Arguments Inheritance System.Object LineAssignment Namespace : Configit.Configurator.Service.Request Assembly : Configit.Configurator.Service.dll Syntax public class LineAssignment Constructors LineAssignment() Create new LineAssignment object. Declaration public LineAssignment() Properties Arguments Any input arguments given to current line Declaration public ExpandoObject Arguments { get; set; } Property Value System.Dynamic.ExpandoObject LineId Id of the line to apply the assignments to. Declaration public string LineId { get; set; } Property Value System.String PriceLineAssignments Assignments to the price calculation Declaration public IReadOnlyList<PriceLineAssignment> PriceLineAssignments { get; set; } Property Value System.Collections.Generic.IReadOnlyList < PriceLineAssignment > ProductId Id of the line's product. Declaration public string ProductId { get; set; } Property Value System.String VariableAssignments Assignments to the configurator Declaration public IReadOnlyList<VariableAssignment> VariableAssignments { get; set; } Property Value System.Collections.Generic.IReadOnlyList < VariableAssignment >"
  },
  "api/Configit.Configurator.Service.Request.SublinesRequest.html": {
    "href": "api/Configit.Configurator.Service.Request.SublinesRequest.html",
    "title": "Class SublinesRequest | Configit VT SDK",
    "keywords": "Class SublinesRequest Request for the SublinesAsync(SublinesRequest) Inheritance System.Object SublinesRequest Namespace : Configit.Configurator.Service.Request Assembly : Configit.Configurator.Service.dll Syntax public class SublinesRequest : IRequest, IMultilevelRequest Constructors SublinesRequest(String, String, String, DateTime, String, String, IReadOnlyList<LineAssignment>, ExpandoObject, LineAssignment, ValueWithUnit, SublinesSettings) Create new SublinesRequest object. Declaration public SublinesRequest(string packagePath = null, string language = null, string currency = null, DateTime date = null, string priceReportId = null, string lineId = null, IReadOnlyList<LineAssignment> lineAssignments = null, ExpandoObject globalArguments = null, LineAssignment rootLineAssignment = null, ValueWithUnit rootQuantity = null, SublinesSettings settings = null) Parameters Type Name Description System.String packagePath System.String language System.String currency System.DateTime date System.String priceReportId System.String lineId System.Collections.Generic.IReadOnlyList < LineAssignment > lineAssignments System.Dynamic.ExpandoObject globalArguments LineAssignment rootLineAssignment ValueWithUnit rootQuantity SublinesSettings settings Properties Currency Declaration public string Currency { get; set; } Property Value System.String Date Declaration public DateTime Date { get; set; } Property Value System.DateTime GlobalArguments Declaration public ExpandoObject GlobalArguments { get; set; } Property Value System.Dynamic.ExpandoObject Language Declaration public string Language { get; set; } Property Value System.String LineAssignments Declaration public IReadOnlyList<LineAssignment> LineAssignments { get; set; } Property Value System.Collections.Generic.IReadOnlyList < LineAssignment > LineId Declaration public string LineId { get; set; } Property Value System.String PackagePath Declaration public string PackagePath { get; set; } Property Value System.String PriceReportId Declaration public string PriceReportId { get; set; } Property Value System.String RootLineAssignment Assignments to the root line. Declaration public LineAssignment RootLineAssignment { get; set; } Property Value LineAssignment RootQuantity The quantity of the root product, used when calculating prices. Declaration public ValueWithUnit RootQuantity { get; set; } Property Value ValueWithUnit Settings Settings that specify whether to prevent argument expansion, and whether to include debug information in SublinesResponse . Declaration public SublinesSettings Settings { get; set; } Property Value SublinesSettings"
  },
  "api/Configit.Configurator.Service.Response.ConfigurationValue.html": {
    "href": "api/Configit.Configurator.Service.Response.ConfigurationValue.html",
    "title": "Class ConfigurationValue | Configit VT SDK",
    "keywords": "Class ConfigurationValue Base class for SingleValuedValue and MultiValuedValue . Inheritance System.Object ConfigurationValue Derived classes MultiValuedValue SingleValuedValue Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public abstract class ConfigurationValue Constructors ConfigurationValue(String) Initializes a new instance of ConfigurationValue . Declaration protected ConfigurationValue(string text) Parameters Type Name Description System.String text The value text. Properties Text A textual representation of the value. For non-numeric values, the text is translated based on the language in the request. Declaration public string Text { get; } Property Value System.String"
  },
  "api/Configit.Configurator.Service.Response.ConfigureResponse.html": {
    "href": "api/Configit.Configurator.Service.Response.ConfigureResponse.html",
    "title": "Class ConfigureResponse | Configit VT SDK",
    "keywords": "Class ConfigureResponse Response object returned by ConfigureAsync(ConfigureRequest) . The response has the configuration of the product, and includes the variables, their values, pricing information, and arguments. Inheritance System.Object ConfigureResponse Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public class ConfigureResponse Remarks The variables (see ConfigurationVariable ) are organized into Sections based on the requested view. Sections provide the structure for how to show variables in the UI. For instance, you might display sections as sheets in a tabbed control. Each variable has a collection of values that represent the variable's domain. Values have state (see ConfigurationValueState ) that says how the user can interact with the value. For example, if the user can assign it or not, and what consequences may occur when assigning. Constructors ConfigureResponse(IEnumerable<Section>, ExpandoObject, IEnumerable<Issue>, PriceSheet, RemovedAssignments, Debug, String) Initializes a new instance of ConfigureResponse . Declaration public ConfigureResponse(IEnumerable<Section> sections, ExpandoObject arguments, IEnumerable<Issue> issues, PriceSheet priceSheet, RemovedAssignments removedAssignments, Debug debug, string packagePath) Parameters Type Name Description System.Collections.Generic.IEnumerable < Section > sections System.Dynamic.ExpandoObject arguments System.Collections.Generic.IEnumerable < Issue > issues PriceSheet priceSheet RemovedAssignments removedAssignments Debug debug System.String packagePath Properties Arguments Contains the original request arguments, plus any added by the service (for example, variants used by the price service). The service does not add arguments if ConfigureSettings .PreventArgumentExpansion is false . Declaration public ExpandoObject Arguments { get; } Property Value System.Dynamic.ExpandoObject Debug Optional debug information provided when ConfigureSettings .Debug is true in the request. Declaration public Debug Debug { get; } Property Value Debug Issues A collection of issues found while processing the assignments. Declaration public IReadOnlyList<Issue> Issues { get; } Property Value System.Collections.Generic.IReadOnlyList < Issue > PackagePath The versioned package path used for generating this response. Even though the Configit.Configurator.Service.Request.IRequest.PackagePath is un-versioned, this property will always contain the versioned path. Subsequent requests within the same configuration session should use the same versioned package path. Declaration public string PackagePath { get; } Property Value System.String PriceSheet Price of the configuration. Declaration public PriceSheet PriceSheet { get; } Property Value PriceSheet Remarks If IncludePriceLines is true , the price sheet includes the PriceLines collection. RemovedAssignments A collection of assignments removed by the configure service. Declaration public RemovedAssignments RemovedAssignments { get; } Property Value RemovedAssignments Sections A collection of Section objects. Each section has a collection of variables, and may contain subsections. Declaration public IReadOnlyList<Section> Sections { get; } Property Value System.Collections.Generic.IReadOnlyList < Section >"
  },
  "api/Configit.Configurator.Service.Response.IntervalValue.html": {
    "href": "api/Configit.Configurator.Service.Response.IntervalValue.html",
    "title": "Class IntervalValue | Configit VT SDK",
    "keywords": "Class IntervalValue An interval value in a variable. Inheritance System.Object ConfigurationValue SingleValuedValue IntervalValue Inherited Members SingleValuedValue.State SingleValuedValue.InternalState ConfigurationValue.Text Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public class IntervalValue : SingleValuedValue Constructors IntervalValue(String, Object, Object, ConfigurationValueState, StateAndJustification) Initializes a new instance of IntervalValue . Declaration public IntervalValue(string text, object lower, object upper, ConfigurationValueState state, StateAndJustification internalState) Parameters Type Name Description System.String text System.Object lower System.Object upper ConfigurationValueState state StateAndJustification internalState Properties Lower The lower bound of the interval. Declaration public object Lower { get; } Property Value System.Object Upper The upper bound of the interval. Declaration public object Upper { get; } Property Value System.Object"
  },
  "api/Configit.Configurator.Service.Response.Issue.html": {
    "href": "api/Configit.Configurator.Service.Response.Issue.html",
    "title": "Class Issue | Configit VT SDK",
    "keywords": "Class Issue Represents an issue the configure service had when processing the ConfigureRequest . Inheritance System.Object Issue Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public class Issue Constructors Issue(String, String, IEnumerable<String>, IEnumerable<String>) Initializes a new instance of Issue . Declaration public Issue(string type, string message, IEnumerable<string> sources, IEnumerable<string> affectedVariables) Parameters Type Name Description System.String type System.String message System.Collections.Generic.IEnumerable < System.String > sources System.Collections.Generic.IEnumerable < System.String > affectedVariables Properties AffectedVariables List of variables affected by the issue, if any. Assigning different values to them may help fix the issue. Declaration public IEnumerable<string> AffectedVariables { get; set; } Property Value System.Collections.Generic.IEnumerable < System.String > Message An internal message describing the issue. Declaration public string Message { get; set; } Property Value System.String Sources List of sources that caused the issue. For example, the constraint(s) that couldn't be met. Declaration public IEnumerable<string> Sources { get; set; } Property Value System.Collections.Generic.IEnumerable < System.String > Type The issue type. Declaration public string Type { get; set; } Property Value System.String"
  },
  "api/Configit.Configurator.Service.Response.PriceSummary.html": {
    "href": "api/Configit.Configurator.Service.Response.PriceSummary.html",
    "title": "Class PriceSummary | Configit VT SDK",
    "keywords": "Class PriceSummary The summary of a PriceSheet , including a product's net value, tax, and total price. Inheritance System.Object PriceSummary Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public class PriceSummary Constructors PriceSummary(ValueWithCurrency, ValueWithCurrency, ValueWithCurrency) Initializes a new instance of PriceSummary . Declaration public PriceSummary(ValueWithCurrency net, ValueWithCurrency tax, ValueWithCurrency total) Parameters Type Name Description ValueWithCurrency net ValueWithCurrency tax ValueWithCurrency total Properties Net The net value. Declaration public ValueWithCurrency Net { get; } Property Value ValueWithCurrency Tax The tax value. Declaration public ValueWithCurrency Tax { get; } Property Value ValueWithCurrency Total The total price, equalling the net value minus tax. Declaration public ValueWithCurrency Total { get; } Property Value ValueWithCurrency"
  },
  "api/Configit.Configurator.Service.Response.Product.html": {
    "href": "api/Configit.Configurator.Service.Response.Product.html",
    "title": "Class Product | Configit VT SDK",
    "keywords": "Class Product Represents a product associated with a Line . Inheritance System.Object Product Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public class Product Constructors Product(String, String, Boolean) Initializes a new instance of Product with an id , text , and optional isConfigurable flag. Declaration public Product(string id, string text, bool isConfigurable = false) Parameters Type Name Description System.String id System.String text System.Boolean isConfigurable Properties Id The unique ID of the product. For configurable products, use this ID in calls to ConfigureService . Declaration public string Id { get; } Property Value System.String IsConfigurable Whether the product is configurable ( true ) and can be used by ConfigureService , or is a standard, non-configurable product ( false ). Declaration public bool IsConfigurable { get; } Property Value System.Boolean Text The translated text of the product. Declaration public string Text { get; } Property Value System.String"
  },
  "api/Configit.Configurator.Service.Response.SublinesResponse.html": {
    "href": "api/Configit.Configurator.Service.Response.SublinesResponse.html",
    "title": "Class SublinesResponse | Configit VT SDK",
    "keywords": "Class SublinesResponse Response object returned by SublinesAsync(SublinesRequest) . Contains a root line and a flattened list of any sublines that fall under the root. Each line has pricing and translated texts. Inheritance System.Object SublinesResponse Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public class SublinesResponse Remarks The root line is represented by these properties in the response: Id Product PriceSheet Sublines (if any) are returned in the Lines collection. Debug information is provided when SublinesSettings .Debug is true in the request. Constructors SublinesResponse(String, Product, ValueWithUnit, PriceSheet, IEnumerable<Line>, String, TraceEvent) Initializes a new instance of SublinesResponse . Declaration public SublinesResponse(string id, Product product, ValueWithUnit quantity, PriceSheet priceSheet, IEnumerable<Line> lines, string packagePath, TraceEvent debug = null) Parameters Type Name Description System.String id ID of the root line. Product product Information about the root line's product. ValueWithUnit quantity Quantity of the root line. PriceSheet priceSheet Price sheet for the root line. System.Collections.Generic.IEnumerable < Line > lines The flattened list of nested sublines of the root line. System.String packagePath The versioned package path used for generating this response. Configit.BOM.Solve.Trace.TraceEvent debug Optional debug information provided when SublinesSettings .Debug is true in the request. Properties Debug Optional debug information provided when SublinesSettings .Debug is true in the request. Declaration public TraceEvent Debug { get; } Property Value Configit.BOM.Solve.Trace.TraceEvent Id ID of the root line. Declaration public string Id { get; } Property Value System.String Lines All sublines of the root line. Declaration public IReadOnlyList<Line> Lines { get; } Property Value System.Collections.Generic.IReadOnlyList < Line > Remarks This is a flat list of nested lines. For any line containing a multilevel product, its sublines will be included in the list as well, and so on. To see which parent line a subline belongs to, refer to ParentId . If the root line does not represent a multilevel product, this list is empty. PackagePath The versioned package path used for generating this response. Even though the Configit.Configurator.Service.Request.IRequest.PackagePath is unversioned, this property will always contain the versioned path. Subsequent requests within the same configuration session should use the same versioned package path. Declaration public string PackagePath { get; } Property Value System.String PriceSheet The price sheet of the root line. Declaration public PriceSheet PriceSheet { get; } Property Value PriceSheet Product The product associated with the root line. Declaration public Product Product { get; } Property Value Product Quantity Quantity of the root line, as passed in SublinesRequest. RootQuantity . Declaration public ValueWithUnit Quantity { get; } Property Value ValueWithUnit"
  },
  "api/Configit.Configurator.Service.Response.Trace.html": {
    "href": "api/Configit.Configurator.Service.Response.Trace.html",
    "title": "Class Trace | Configit VT SDK",
    "keywords": "Class Trace Provides trace information. Inheritance System.Object Trace Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public class Trace Constructors Trace(String, String, String, String, IEnumerable<Trace>) Initializes a new instance of Trace . Declaration public Trace(string identifier, string message, string details, string severity, IEnumerable<Trace> children) Parameters Type Name Description System.String identifier System.String message System.String details System.String severity System.Collections.Generic.IEnumerable < Trace > children Properties Children Gets the children. Declaration public IReadOnlyList<Trace> Children { get; } Property Value System.Collections.Generic.IReadOnlyList < Trace > Details Gets the details. Declaration public string Details { get; } Property Value System.String Identifier Gets the identifier. Declaration public string Identifier { get; } Property Value System.String Message Gets the message. Declaration public string Message { get; } Property Value System.String Severity Gets the severity. Declaration public string Severity { get; } Property Value System.String"
  },
  "api/Configit.Configurator.Service.ConfigureService.html": {
    "href": "api/Configit.Configurator.Service.ConfigureService.html",
    "title": "Class ConfigureService | Configit VT SDK",
    "keywords": "Class ConfigureService Calculates the configuration and pricing for a single product. Inheritance System.Object ConfigureService Namespace : Configit.Configurator.Service Assembly : Configit.Configurator.Service.dll Syntax public class ConfigureService Remarks The ConfigureService uses internal services and aggregates their responses into a single response. Methods ConfigureAsync(ConfigureRequest) Calculates the configuration and pricing for a single product. Declaration public Task<ConfigureResponse> ConfigureAsync(ConfigureRequest request) Parameters Type Name Description ConfigureRequest request The product to configure, plus any assignments to variables or pricing. Returns Type Description System.Threading.Tasks.Task < ConfigureResponse > Returns the complete configuration, with pricing. Remarks The request contains: The ID of the VT package to use. The ID of the product to configure. Assignments to product variables and price lines. The ID of the view to use. You can get the product's default configuration by not setting any assignments in the request. The response includes the complete configuration of the product, including all variables, and the state of each value in the variable (whether it is assigned, can be assigned, and more). Exceptions Type Condition ConfiguratorException Thrown if request is invalid or an error occurred during processing. See ConfiguratorException for more details."
  },
  "api/Configit.Configurator.Service.Exceptions.CannotLoadVTPackageException.html": {
    "href": "api/Configit.Configurator.Service.Exceptions.CannotLoadVTPackageException.html",
    "title": "Class CannotLoadVTPackageException | Configit VT SDK",
    "keywords": "Class CannotLoadVTPackageException Thrown when the package or one if its resource could not be loaded, preventing the configurator to process the request. Inheritance System.Object System.Exception ConfiguratorException CannotLoadVTPackageException Namespace : Configit.Configurator.Service.Exceptions Assembly : Configit.Configurator.Service.dll Syntax public class CannotLoadVTPackageException : ConfiguratorException"
  },
  "api/Configit.Configurator.Service.ExpandArgumentsService.html": {
    "href": "api/Configit.Configurator.Service.ExpandArgumentsService.html",
    "title": "Class ExpandArgumentsService | Configit VT SDK",
    "keywords": "Class ExpandArgumentsService For manually expanding arguments. Inheritance System.Object ExpandArgumentsService Namespace : Configit.Configurator.Service Assembly : Configit.Configurator.Service.dll Syntax public class ExpandArgumentsService Constructors ExpandArgumentsService(ArgumentsService, PackagePathVersioner) Initializes a new instance of ExpandArgumentsService . Declaration public ExpandArgumentsService(ArgumentsService internalService, PackagePathVersioner packagePathVersioner) Parameters Type Name Description Configit.Arguments.Service.ArgumentsService internalService PackagePathVersioner packagePathVersioner Methods ExpandArgumentsAsync(ExpandArgumentsRequest) Expands the arguments in ExpandArgumentsRequest and returns them in ExpandArgumentsResponse . Declaration public Task<ExpandArgumentsResponse> ExpandArgumentsAsync(ExpandArgumentsRequest request) Parameters Type Name Description ExpandArgumentsRequest request The arguments to expand, and the package to expand them from. Returns Type Description System.Threading.Tasks.Task < ExpandArgumentsResponse > An ExpandArgumentsResponse containing the expanded arguments. Remarks You do not need to call ExpandArgumentsService , as ConfigureService , PriceService , and SublinesService automatically expand the arguments provided in their request objects. The ExpandArgumentsService allow you to debug your arguments in isolation. Exceptions Type Condition ConfiguratorException Thrown if request is invalid or an error occurred during processing. See ConfiguratorException for more details."
  },
  "api/Configit.Configurator.Service.Request.BaseSettings.html": {
    "href": "api/Configit.Configurator.Service.Request.BaseSettings.html",
    "title": "Class BaseSettings | Configit VT SDK",
    "keywords": "Class BaseSettings Base class for ConfigureSettings , PriceSettings , and SublinesSettings . Inheritance System.Object BaseSettings Derived classes ConfigureSettings PriceSettings SublinesSettings Namespace : Configit.Configurator.Service.Request Assembly : Configit.Configurator.Service.dll Syntax public abstract class BaseSettings Properties Debug When this setting is true , the service response includes debugging information. Declaration public bool Debug { get; set; } Property Value System.Boolean"
  },
  "api/Configit.Configurator.Service.Request.PriceLineAssignment.html": {
    "href": "api/Configit.Configurator.Service.Request.PriceLineAssignment.html",
    "title": "Class PriceLineAssignment | Configit VT SDK",
    "keywords": "Class PriceLineAssignment Represents a value assignment to a price line. Used in ConfigureRequest and PriceRequest . Inheritance System.Object PriceLineAssignment Namespace : Configit.Configurator.Service.Request Assembly : Configit.Configurator.Service.dll Syntax public class PriceLineAssignment Properties PriceLineId The ID of the price line to assign RateValue to. Declaration public string PriceLineId { get; set; } Property Value System.String RateValue The value to assign to the price line rate. Declaration public decimal RateValue { get; set; } Property Value System.Decimal"
  },
  "api/Configit.Configurator.Service.Request.SublinesSettings.html": {
    "href": "api/Configit.Configurator.Service.Request.SublinesSettings.html",
    "title": "Class SublinesSettings | Configit VT SDK",
    "keywords": "Class SublinesSettings For changing the behavior of SublinesService . All settings are false by default. Setting When true PreventArgumentExpansion Prevents the service from expanding arguments. You are responsible for passing expanded arguments in the request. Inherited from BaseSettings . IncludePriceLines SublinesResponse includes PriceLine s in the returned PriceSheet s. For debugging purposes. Debug SublinesResponse includes debug information (see Debug ) . Inherited from BaseSettings . This class intentionally has no content. See BaseSettings for the base implementation. Inheritance System.Object BaseSettings SublinesSettings Inherited Members BaseSettings.Debug Namespace : Configit.Configurator.Service.Request Assembly : Configit.Configurator.Service.dll Syntax public class SublinesSettings : BaseSettings Properties IncludePriceLines When this setting is true , the response includes PriceLine s in the PriceSheet . For debugging purposes. Declaration public bool IncludePriceLines { get; set; } Property Value System.Boolean"
  },
  "api/Configit.Configurator.Service.Response.ConfigurationValueState.html": {
    "href": "api/Configit.Configurator.Service.Response.ConfigurationValueState.html",
    "title": "Class ConfigurationValueState | Configit VT SDK",
    "keywords": "Class ConfigurationValueState Represents the state of a ConfigurationValue , as determined by the configure service. Inheritance System.Object ConfigurationValueState Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public class ConfigurationValueState Remarks ConfigurationValueState decribes the assignment state of a ConfigurationValue and the cause (if any) for why the value is in that state. Assignment state Description Possible causes IsAssigned The value is assigned. CausedByUser CausedByDefault CausedByRule CausedByPhase IsAssignable The value is unassigned. Not applicable IsIncompatible Assigning the value will cause other assignments to be removed. CausedByDefault CausedByRule CausedByPhase IsNeverAssignable The value can never be assigned. By default, values that can't be assigned are not returned in ConfigureResponse . To include them, set IncludeNeverAssignableValues to true . Not applicable Note Phase is unsupported by SAP products. Assignment states are mutually exclusive, and have only one cause set to true at a time. Use ConfigurationValueState to create UI that emphasizes a ConfigurationValue 's state. For example: If a value is incompatible ( IsIncompatible is true ), you could give it a background color, making the user aware that there is something different about the value. If a user has made an assigment ( IsAssigned and CausedByUser are true ), you could add a user icon next to the value so that the user can easily identify assignments they've made. Properties CausedByDefault Returns true if the value state is caused by a default value. Declaration public bool CausedByDefault { get; set; } Property Value System.Boolean Remarks When IsAssigned is true , CausedByDefault means that the value is assigned by default. When IsIncompatible is true , CausedByDefault means that assigning the value will remove a default assignment to another ConfigurationVariable . CausedByPhase Returns true if a phase assignment caused the the value to be incompatible. Declaration public bool CausedByPhase { get; set; } Property Value System.Boolean Remarks Applies to IsIncompatible . Note Phase is unsupported by SAP products. CausedByRule Returns true if a rule caused the value to be incompatible, meaning assigning it will cause other assignments to be removed. Declaration public bool CausedByRule { get; set; } Property Value System.Boolean Remarks Applies to IsIncompatible . CausedByUser Returns true if the user assigned the value. Declaration public bool CausedByUser { get; set; } Property Value System.Boolean Remarks Applies to IsAssigned . IsAssignable Returns true if the value can be assigned. Declaration public bool IsAssignable { get; set; } Property Value System.Boolean IsAssigned Returns true if the value is assigned. A value can be assigned for these reasons: CausedByUser CausedByDefault CausedByRule CausedByPhase Declaration public bool IsAssigned { get; set; } Property Value System.Boolean IsIncompatible Returns true if the value is incompatible, meaning assigning it will cause other assignments to be removed. A value can be incompatible for these reasons: CausedByDefault CausedByRule CausedByPhase Declaration public bool IsIncompatible { get; set; } Property Value System.Boolean IsNeverAssignable Returns true if the value can never be assigned. By default, these values are not returned in the response. To include them, set IncludeNeverAssignableValues to true . Declaration public bool IsNeverAssignable { get; set; } Property Value System.Boolean Methods ToString() Returns string representation of the object, for debugging purposes. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Configit.Configurator.Service.Response.DebugTrace.html": {
    "href": "api/Configit.Configurator.Service.Response.DebugTrace.html",
    "title": "Class DebugTrace | Configit VT SDK",
    "keywords": "Class DebugTrace Debugging information for how the configuration engine assigns the values to variables. Inheritance System.Object DebugTrace Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public class DebugTrace Constructors DebugTrace(String) Initializes a new instance of DebugTrace . Declaration public DebugTrace(string trace) Parameters Type Name Description System.String trace The trace text. Properties Trace The Trace. Declaration public string Trace { get; } Property Value System.String"
  },
  "api/Configit.Configurator.Service.Response.MultiValuedValue.html": {
    "href": "api/Configit.Configurator.Service.Response.MultiValuedValue.html",
    "title": "Class MultiValuedValue | Configit VT SDK",
    "keywords": "Class MultiValuedValue A value in a variable that can have multiple values assigned at the same time ( AllowMultipleAssignments is true ). To include a MultiValuedValue in a configuration: Create a VariableAssignment . Set the assignment's Value to the IncludeValue .Value. To exclude a MultiValuedValue from a configuration: Create a VariableAssignment . Set the assignment's Value to the ExcludeValue .Value. Set the assignment's Exclude property to false . MultiValuedValue itself does not have ConfigurationValueState . Instead, see IncludeValue.ConfigurationValueState and ExcludeValue.ConfigurationValueState. Inheritance System.Object ConfigurationValue MultiValuedValue Inherited Members ConfigurationValue.Text Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public class MultiValuedValue : ConfigurationValue Constructors MultiValuedValue(String, SingletonValue, SingletonValue, IEnumerable<Property>) Initializes a new instance of MultiValuedValue . Declaration public MultiValuedValue(string text, SingletonValue includeValue, SingletonValue excludeValue, IEnumerable<Property> properties) Parameters Type Name Description System.String text SingletonValue includeValue SingletonValue excludeValue System.Collections.Generic.IEnumerable < Property > properties Properties ExcludeValue Gets the excluded value. Declaration public SingletonValue ExcludeValue { get; } Property Value SingletonValue IncludeValue Gets the included value. Declaration public SingletonValue IncludeValue { get; } Property Value SingletonValue Properties Gets the properties. Declaration public IEnumerable<Property> Properties { get; } Property Value System.Collections.Generic.IEnumerable < Property >"
  },
  "api/Configit.Configurator.Service.Response.PriceLine.html": {
    "href": "api/Configit.Configurator.Service.Response.PriceLine.html",
    "title": "Class PriceLine | Configit VT SDK",
    "keywords": "Class PriceLine A line within a PriceSheet . Some lines contribute to the total value of the PriceSheet , while others are for informational purposes, like subtotals, statistical values, or header lines. For non-header lines, the PriceLineRate represents the value used to calculate the price line result. PriceLineRate is IsAssignable , you can set the price line's value in PriceLineAssignment s in requests to the configure and pricing services. See Status to determine whether the price line contributes to the price, and if the line is invalid. Inheritance System.Object PriceLine Namespace : Configit.Configurator.Service.Response Assembly : Configit.Configurator.Service.dll Syntax public class PriceLine Constructors PriceLine(String, String, String, String, PriceLineRate, ValueWithUnit, PriceLineStatus, IEnumerable<Property>) Initializes a new instance of PriceLine . Declaration public PriceLine(string id, string stepId, string text, string feature, PriceLineRate rate, ValueWithUnit result, PriceLineStatus status, IEnumerable<Property> properties) Parameters Type Name Description System.String id System.String stepId System.String text System.String feature PriceLineRate rate ValueWithUnit result PriceLineStatus status System.Collections.Generic.IEnumerable < Property > properties Properties Feature Optionally contains the feature that caused this price line to be added. Declaration public string Feature { get; } Property Value System.String Id The ID of the price line. Used in a in a PriceLineAssignment to reference a price line. Declaration public string Id { get; } Property Value System.String Properties Gets any additional properties for this price line. Declaration public IReadOnlyList<Property> Properties { get; } Property Value System.Collections.Generic.IReadOnlyList < Property > Rate The rate, consisting of a value, its unit of measurement, and (where relevant) batch size. Used to calculate the Result . Declaration public PriceLineRate Rate { get; } Property Value PriceLineRate Result The result of the value calculated from Rate . Declaration public ValueWithUnit Result { get; } Property Value ValueWithUnit Status Explains if the price line is disabled, is for informational purposes only, or is invalid. Declaration public PriceLineStatus Status { get; } Property Value PriceLineStatus StepId The ID of the price procedure step that generated the price line. Declaration public string StepId { get; } Property Value System.String Text Text describing the price line. The text is translated based on the language in the request. Declaration public string Text { get; } Property Value System.String"
  },
  "api/Configit.Configurator.Service.ValueWithUnit.html": {
    "href": "api/Configit.Configurator.Service.ValueWithUnit.html",
    "title": "Class ValueWithUnit | Configit VT SDK",
    "keywords": "Class ValueWithUnit A value and its unit of measurement. Inheritance System.Object ValueWithUnit Namespace : Configit.Configurator.Service Assembly : Configit.Configurator.Service.dll Syntax public class ValueWithUnit Constructors ValueWithUnit(Decimal, String) Initializes a new instance of ValueWithUnit . Declaration public ValueWithUnit(decimal value, string unit) Parameters Type Name Description System.Decimal value System.String unit Properties Unit The unit of measurement. Declaration public string Unit { get; set; } Property Value System.String Value The value. Declaration public decimal Value { get; set; } Property Value System.Decimal"
  },
  "api/Configit.Configurator.Service.html": {
    "href": "api/Configit.Configurator.Service.html",
    "title": "Namespace Configit.Configurator.Service | Configit VT SDK",
    "keywords": "Namespace Configit.Configurator.Service Classes ConfiguratorServices This class takes care of construction and configuration of internal Core services, and creates instances of ConfigureService , PriceService and SublinesService ConfigureService Calculates the configuration and pricing for a single product. ExpandArgumentsService For manually expanding arguments. PackagePathVersioner Used by the aggregation services to ensure that requests use a versioned package path. PriceService Calculates pricing for a single product. ServiceSettings Class representation of settings used to create services SublinesService Gets sublines for a single product. ValueWithUnit A value and its unit of measurement."
  },
  "api/Configit.Configurator.Service.Exceptions.MissingPropertyInRequestException.html": {
    "href": "api/Configit.Configurator.Service.Exceptions.MissingPropertyInRequestException.html",
    "title": "Class MissingPropertyInRequestException | Configit VT SDK",
    "keywords": "Class MissingPropertyInRequestException Thrown when a mandatory argument is missing in a request to a configuration service. Inheritance System.Object System.Exception ConfiguratorException MissingPropertyInRequestException Namespace : Configit.Configurator.Service.Exceptions Assembly : Configit.Configurator.Service.dll Syntax public class MissingPropertyInRequestException : ConfiguratorException"
  },
  "api/Configit.Configurator.Service.PackagePathVersioner.html": {
    "href": "api/Configit.Configurator.Service.PackagePathVersioner.html",
    "title": "Class PackagePathVersioner | Configit VT SDK",
    "keywords": "Class PackagePathVersioner Used by the aggregation services to ensure that requests use a versioned package path. Inheritance System.Object PackagePathVersioner Namespace : Configit.Configurator.Service Assembly : Configit.Configurator.Service.dll Syntax public class PackagePathVersioner Constructors PackagePathVersioner() default constructor for internal/test usage. Declaration protected PackagePathVersioner() PackagePathVersioner(IStorage) Initializes a new instance of PackagePathVersioner Declaration public PackagePathVersioner(IStorage storage) Parameters Type Name Description Configit.ResourceRepository.Storage.IStorage storage The storage containing the package paths to be versioned"
  },
  "api/Configit.Configurator.Service.Request.ConfigureSettings.html": {
    "href": "api/Configit.Configurator.Service.Request.ConfigureSettings.html",
    "title": "Class ConfigureSettings | Configit VT SDK",
    "keywords": "Class ConfigureSettings For changing the behavior of ConfigureService . Inheritance System.Object BaseSettings ConfigureSettings Inherited Members BaseSettings.Debug Namespace : Configit.Configurator.Service.Request Assembly : Configit.Configurator.Service.dll Syntax public class ConfigureSettings : BaseSettings Remarks All settings are false by default. Setting When true PreventArgumentExpansion Prevents the service from expanding arguments. You are responsible for passing expanded arguments in the request. Inherited from BaseSettings . Debug ConfigureResponse includes debug information (see Debug ) . Inherited from BaseSettings . IncludePriceLines ConfigureResponse includes PriceLine s in the returned PriceSheet s. For debugging purposes. IncludeInternals ConfigureResponse includes the internal state/justification of the underlying solve service. For debugging purposes. IncludeNeverAssignableValues ConfigureResponse includes values that can never be assigned. For debugging purposes. Properties IncludeInternals When this setting is true , the response includes the internal state/justification from the underlying solve service. For debugging purposes. Declaration public bool IncludeInternals { get; set; } Property Value System.Boolean IncludeNeverAssignableValues When this setting is true , the response includes values that can never be assigned (see IsNeverAssignable ). For debugging purposes. Declaration public bool IncludeNeverAssignableValues { get; set; } Property Value System.Boolean IncludePriceLines When this setting is true , the response includes PriceLine s in the PriceSheet . For debugging purposes. Declaration public bool IncludePriceLines { get; set; } Property Value System.Boolean"
  }
}